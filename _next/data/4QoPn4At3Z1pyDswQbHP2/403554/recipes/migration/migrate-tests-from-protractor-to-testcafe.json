{"pageProps":{"content":{"html":"        <h1>Migrate Tests from Protractor to TestCafe</h1>\n\n<p><a href=\"https://www.protractortest.org/\" target=\"_blank\">Protractor<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> is an end-to-end testing tool for Angular and AngularJS applications. The Angular team announced plans to end support for Protractor by 2022 and recommended that users migrate to an alternative testing solution. For more information, refer to the following post: <a href=\"https://github.com/angular/protractor/issues/5502\" target=\"_blank\">Future of Angular E2E &amp; Plans for Protractor<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>.</p>\n<p>This section describes how to adapt Protractor tests to TestCafe. The code samples below illustrate the difference between tests in Protractor and TestCafe API.</p>\n<p><strong>Protractor</strong></p>\n<pre><code class=\"lang-js\">describe(&#39;To do test&#39;, () =&gt; { \n  it(&#39;Correct new items&#39;, () =&gt; { \n    browser.get(&#39;http://todo.org/&#39;) \n    element(by.css(&#39;.todo-new-text&#39;)).sendKeys(&#39;Start migration to Testcafe&#39;); \n    element(by.cssContainingText(&#39;button&#39;, &#39;Add&#39;)).click(); \n    expect(element(by.css(&#39;.todo-list&#39;)).all(by.css(&#39;.todo-item&#39;)).count()).toEqual(1); \n    element(by.css(&#39;.todo-new-text&#39;)).sendKeys(&#39;Finish migration to Testcafe&#39;); \n    element(by.cssContainingText(&#39;button&#39;, &#39;Add&#39;)).click(); \n    expect(element(by.css(&#39;.todo-list&#39;)).all(by.css(&#39;.todo-item&#39;)).count()).toEqual(2); \n    expect(element(by.css(&#39;.todo-list&#39;)).all(by.css(&#39;li&#39;)).get(0).getText()).toEqual(&#39;Start migration to Testcafe&#39;); \n    expect(element(by.css(&#39;.todo-list&#39;)).all(by.css(&#39;li&#39;)).get(1).getText()).toEqual(&#39;Finish migration to Testcafe&#39;); \n  }) \n}) \n</code></pre><p><strong>TestCafe</strong></p>\n<pre><code class=\"lang-js\">fixture(&#39;To do test&#39;) \n  .page(&#39;http://todo.org/&#39;); \n\ntest(&#39;Correct new items&#39;, async t =&gt; { \n  await t \n    .typeText(&#39;.todo-new-text&#39;, &#39;Start migration to Testcafe&#39;) \n    .click(Selector(&#39;button&#39;).withText(&#39;Add&#39;)) \n    .expect(Selector(&#39;.todo-list&#39;).childElementCount).eql(1) \n    .typeText(&#39;.todo-new-text&#39;, &#39;Finish migration to Testcafe&#39;) \n    .click(Selector(&#39;button&#39;).withText(&#39;Add&#39;)) \n    .expect(Selector(&#39;.todo-list&#39;).childElementCount).eql(2) \n    .expect(Selector(&#39;.todo-list&#39;).child(0).innerText).eql(&#39;Start migration to Testcafe&#39;) \n    .expect(Selector(&#39;.todo-list&#39;).child(1).innerText).eql(&#39;Finish migration to Testcafe&#39;) \n});\n</code></pre><h2 id=\"install-and-setup-testcafe__$\"><a class=\"anchor-fix\" href=\"#install-and-setup-testcafe\" id=\"install-and-setup-testcafe\"></a>Install and Setup TestCafe<a class=\"anchor-hash\" href=\"#install-and-setup-testcafe\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<ol>\n<li><p><a class=\"xref\" href=\"/documentation/402834/guides/basic-guides/install-testcafe\">Install TestCafe</a> in your project directory. The <code>--save-dev</code> option adds TestCafe to the development dependencies.</p>\n<pre><code>npm install --save-dev testcafe \n</code></pre></li>\n<li><p>Install a custom <a href=\"https://github.com/DevExpress/angular-testcafe\" target=\"_blank\">Angular builder for TestCafe<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>. This command serves an Angular application and runs TestCafe tests.</p>\n<pre><code>npm install --save-dev angular-testcafe \n</code></pre></li>\n<li><p>Optional. TestCafe supports <a href=\"https://www.w3schools.com/cssref/css_selectors.php\" target=\"_blank\">standard CSS selectors<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>, <a class=\"xref\" href=\"/documentation/402666/reference/test-api/selector\">Selector</a> objects, and <a class=\"xref\" href=\"/documentation/402666/reference/test-api/selector\">framework-specific Selector objects</a>. </p>\n<p> Install the <a href=\"https://github.com/DevExpress/testcafe-angular-selectors\" target=\"_blank\">testcafe-angular-selectors<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> plugin to search for DOM elements in Angular applications.</p>\n<pre><code>npm install --save-dev testcafe-angular-selectors \n</code></pre></li>\n<li><p>Configure the angular.json file. The <strong>devServerTarget</strong> option specifies a project against which to run tests. If this option is not specified, run the required project manually before a test run.</p>\n<p> Refer to the <a class=\"xref\" href=\"/documentation/402638/reference/configuration-file\">TestCafe configuration file</a> topic and the <a href=\"https://github.com/DevExpress/angular-testcafe/blob/master/src/testcafe/schema.json\" target=\"_blank\">schema.json<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> file for the full list of options.</p>\n<pre><code>{ \n  &quot;projects&quot;: { \n    &quot;your_application_name&quot;: { \n      &quot;architect&quot;: { \n        &quot;e2e&quot;: { \n          &quot;builder&quot;: &quot;angular-testcafe:testcafe&quot;, \n          &quot;options&quot;: { \n            &quot;devServerTarget&quot;: &quot;your_application_name:serve&quot;, \n            &quot;browsers&quot;: [ //browsers array \n              &quot;chrome --no-sandbox&quot; \n            ], \n            &quot;src&quot;: [&quot;e2e/*.e2e-spec.ts&quot;] // path to tests \n          } \n        } \n      } \n    } \n  } \n} \n</code></pre></li>\n</ol>\n<h2 id=\"test-structure__$\"><a class=\"anchor-fix\" href=\"#test-structure\" id=\"test-structure\"></a>Test Structure<a class=\"anchor-hash\" href=\"#test-structure\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>TestCafe uses the following main objects to create tests:</p>\n<ul>\n<li><a class=\"xref\" href=\"/documentation/403367/reference/test-api/fixture\">Fixture</a> and <a class=\"xref\" href=\"/documentation/403366/reference/test-api/test\">Test</a> objects.</li>\n<li>The <a class=\"xref\" href=\"/documentation/402665/reference/test-api/testcontroller\">TestController</a> object.</li>\n<li><a class=\"xref\" href=\"/documentation/402666/reference/test-api/selector\">Selector</a> objects.</li>\n</ul>\n<pre><code class=\"lang-js\">// Protractor\ndescribe(&#39;Test my website&#39;, () =&gt; { \n  it(&#39;Test first page&#39;, () =&gt; { \n    browser.get(&#39;http://mypage.com/&#39;);\n    element(by.cssContainingText(&#39;button&#39;, &#39;Add&#39;)).click(); \n    // your code\n  }) \n}) \n\n// TestCafe\nfixture(&#39;Test my website&#39;)\n    .page(&#39;http://mypage.com/&#39;);\n\ntest (&#39;Test first page&#39;, async t =&gt; {\n    await t\n        .click(&#39;#signin&#39;)\n        // your code\n});\n</code></pre><p>The <a class=\"xref\" href=\"/documentation/402665/reference/test-api/testcontroller\">TestController</a> object exposes test API methods. Use the test controller (as <code>t</code>) to call <a class=\"xref\" href=\"/documentation/402833/guides/basic-guides/test-actions\">test actions</a>, handle <a class=\"xref\" href=\"/documentation/402833/guides/basic-guides/test-actions#handle-native-dialogs\">browser dialogs</a>, use the <a class=\"xref\" href=\"/documentation/402833/guides/basic-guides/test-actions#wait\">wait function</a>, or execute <a class=\"xref\" href=\"/documentation/402837/guides/basic-guides/assertions\">assertions</a>. Use the <code>async/await</code> construction with the test controller to wait for called actions to complete. All test controller methods are chainable and asynchronous.</p>\n<pre><code class=\"lang-js\">test (&#39;My first test&#39;, async t =&gt; {\n    await t\n        .click(&#39;#signin&#39;)\n        .typeTest(&#39;#login&#39;,&#39;login&#39;)\n        .typeTest(&#39;#password&#39;,&#39;password&#39;)\n        // your code\n});\n</code></pre><p>TestCafe supports standard CSS selectors and has its own <a class=\"xref\" href=\"/documentation/402666/reference/test-api/selector\">Selector</a> object to identify a target page element. TestCafe <a class=\"xref\" href=\"/documentation/402666/reference/test-api/selector\">Selector</a> objects have more extended API compared to standard CSS selectors. TestCafe <a class=\"xref\" href=\"/documentation/402666/reference/test-api/selector\">selectors</a> support a built-in automatic wait mechanism and do not require dedicated API to wait for redirects or page elements to appear.</p>\n<p>TestCafe automatically converts a standard CSS selector within test controller methods into a TestCafe <a class=\"xref\" href=\"/documentation/402666/reference/test-api/selector\">Selector</a> object when a test runs.  </p>\n<pre><code class=\"lang-js\">import { Selector } from &#39;testcafe&#39;;   \n\nfixture `Getting Started`   \n .page `http://devexpress.github.io/testcafe/example`;   \n\ntest(&#39;My first test&#39;, async t =&gt; {   \n  await t \n    // Standard CSS selector. \n    // TestCafe will automatically convert this CSS selector to the TestCafe Selector object.\n    .click(&#39;div&#39;) \n    // TestCafe Selector\n    .typeText(Selector(&#39;div&#39;).withText(&#39;some text&#39;))\n}); \n</code></pre><p>The <a class=\"xref\" href=\"/documentation/402666/reference/test-api/selector\">Selector</a> object does not save its value. The value is re-evaluated for each element on a page. You can create the <a class=\"xref\" href=\"/documentation/402666/reference/test-api/selector\">Selector</a> object at runtime or save its value to a variable. </p>\n<pre><code class=\"lang-js\">fixture `Getting Started`   \n .page `http://devexpress.github.io/testcafe/example`;   \n\n// Save selector\nconst sel = Selector(&#39;div&#39;).child();\n\ntest(&#39;My first test&#39;, async t =&gt; {   \n    await t\n        .expect(Selector(&#39;#elementId&#39;).innerText).eql(&#39;text&#39;, &#39;check element text&#39;);\n}); \n</code></pre><p>You can use a single <a class=\"xref\" href=\"/documentation/402666/reference/test-api/selector\">Selector</a> function or chain them to traverse through a DOM tree. </p>\n<pre><code class=\"lang-js\">fixture `Getting Started`   \n .page `http://devexpress.github.io/testcafe/example`;   \n\nconst label = Selector(&#39;#tried-section&#39;).child(&#39;label&#39;);\\\n\ntest(&#39;My first test&#39;, async t =&gt; {   \n  await t \n    // your code\n}); \n</code></pre><h2 id=\"get-dom-elements__$\"><a class=\"anchor-fix\" href=\"#get-dom-elements\" id=\"get-dom-elements\"></a>Get DOM Elements<a class=\"anchor-hash\" href=\"#get-dom-elements\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<ul>\n<li><p>Get an element with a specified tag name. </p>\n<pre><code class=\"lang-js\">// Protractor\nelement(by.tagName(&#39;body&#39;); \n\n// TestCafe\nSelector(&#39;body&#39;); \n</code></pre></li>\n<li><p>Get an element with a specified id attribute.</p>\n<pre><code class=\"lang-js\">// Protractor\nelement(by.id(&#39;id&#39;)); \n\n// TestCafe\nSelector(&#39;#id&#39;);\n</code></pre></li>\n<li><p>Find an element by a specified CSS selector.</p>\n<pre><code class=\"lang-js\">// Protractor\nelement(by.css(&#39;.class&#39;)); \n\n// TestCafe\nSelector(&#39;.class&#39;); \n</code></pre></li>\n<li><p>Find an element with a specified input name attribute.</p>\n<pre><code class=\"lang-js\">// Protractor\nelement(by.name(&#39;name&#39;)); \n\n// TestCafe\nSelector (input[name=&quot;name&quot;]); \n</code></pre></li>\n<li><p>Find an element with a specified text in the CSS class name.</p>\n<pre><code class=\"lang-js\">// Protractor\nelement(by.cssContainingText(&#39;.class&#39;, &#39;text&#39;)); \n\n// TestCafe\nSelector(&#39;.class&#39;).withText(&#39;text&#39;); \n</code></pre></li>\n<li><p>Find the first link with the specified text. </p>\n<pre><code class=\"lang-js\">// Protractor\nelement(by.linkText(&#39;text&#39;)); \n\n// TestCafe\nSelector(&#39;link&#39;).withText(&#39;text&#39;); \n</code></pre></li>\n<li><p>Find an element with a specified ng-model expression (for AngularJS).</p>\n<pre><code class=\"lang-js\">// Protractor\nelement(by.model(&#39;name&#39;)); \n\n// TestCafe\nAngularJSSelector.byModel(&#39;name&#39;); \n</code></pre></li>\n<li><p>Find an element with specified text binding (for AngularJS).</p>\n<pre><code class=\"lang-js\">// Protractor\nelement(by.binding(&#39;bindingname&#39;)); \n\n// TestCafe\nAngularJSSelector.byBinding(&#39;bindingname&#39;); \n</code></pre></li>\n<li><p>Find an element with specified options (for AngularJS).</p>\n<pre><code class=\"lang-js\">// Protractor\nelement(by.options(&#39;options&#39;)); \n\n// TestCafe\nAngularJSSelector.byOptions(&#39;options&#39;); \n</code></pre></li>\n<li><p>Find an element with a specified ng-options expression (for AngularJS).</p>\n<pre><code class=\"lang-js\">// Protractor\nelement(by.repeater(&#39;repeater&#39;);\n\n// TestCafe\nAngularJSSelector.byRepeater(&#39;repeater&#39;); \n</code></pre></li>\n<li><p>Find all elements with a specified condition.</p>\n<p>  TestCafe’s Selector object automatically finds all elements that match the specified condition. Use an index notation to access elements in the array (.nth(index)). </p>\n<pre><code class=\"lang-js\">// Protractor\nelement.all(by.css(&#39;.class&#39;));\n\n// TestCafe\nSelector(&#39;.class&#39;);\n</code></pre><p>  TestCafe uses the first element in the array if you pass this array to assertions.</p>\n</li>\n</ul>\n<p><strong>See Also</strong>: <a class=\"xref\" href=\"/documentation/402829/guides/basic-guides/element-selectors\">Select Page Elements</a></p>\n<h2 id=\"interact-with-dom-elements__$\"><a class=\"anchor-fix\" href=\"#interact-with-dom-elements\" id=\"interact-with-dom-elements\"></a>Interact with DOM Elements<a class=\"anchor-hash\" href=\"#interact-with-dom-elements\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>TestCafe requires that you use the <a class=\"xref\" href=\"/documentation/402665/reference/test-api/testcontroller\">TestController</a> to interact with DOM elements.</p>\n<h3 id=\"actions__$\"><a class=\"anchor-fix\" href=\"#actions\" id=\"actions\"></a>Actions<a class=\"anchor-hash\" href=\"#actions\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\n<p>TestCafe’s <a class=\"xref\" href=\"/documentation/402665/reference/test-api/testcontroller\">TestController</a> object includes actions as its methods. </p>\n<ul>\n<li><p><a class=\"xref\" href=\"/documentation/402833/guides/basic-guides/test-actions#click\">Execute a click</a>.</p>\n<pre><code class=\"lang-js\">// Protractor\nelement(by.css(&#39;.class&#39;)).click(); \n\n// TestCafe\nSelector(&#39;.class&#39;).click();\n</code></pre></li>\n<li><p><a class=\"xref\" href=\"/documentation/402833/guides/basic-guides/test-actions#press-key\">Press a key</a>.</p>\n<pre><code class=\"lang-js\">// Protractor\nelement(by.css(&#39;.class&#39;)).sendKeys(protractor.Key.SPACE); \n\n// TestCafe\nSelector(&#39;.class&#39;).pressKey(&#39;space&#39;);\n</code></pre></li>\n<li><p><a class=\"xref\" href=\"/documentation/402833/guides/basic-guides/test-actions#navigate-to-a-url\">Navigate to a URL</a>.</p>\n<pre><code class=\"lang-js\">// Protractor\nbrowser.get(&#39;https://github.com/DevExpress/testcafe&#39;);\n\n// TestCafe\n.navigateTo(&#39;https://github.com/DevExpress/testcafe&#39;);\n</code></pre></li>\n<li><p><a class=\"xref\" href=\"/documentation/402833/guides/basic-guides/test-actions#type-text\">Type text</a>.</p>\n<pre><code class=\"lang-js\">// Protractor\nelement(by.css(&#39;.login&#39;)).sendKeys(&#39;login&#39;); \n\n// TestCafe\n.typeText(&#39;#login&#39;,&#39;login&#39;);\n</code></pre></li>\n<li><p><a class=\"xref\" href=\"/documentation/402833/guides/basic-guides/test-actions#hover\">Hover an element</a>.</p>\n<pre><code class=\"lang-js\">// Protractor\nbrowser.actions().mouseMove(element(by.css(&#39;.popover&#39;))).perform();\n\n// TestCafe\n.hover(&#39;.popover&#39;);\n</code></pre></li>\n<li><p><a class=\"xref\" href=\"/documentation/402833/guides/basic-guides/test-actions#work-with-iframes\">Switch to an iframe</a>.</p>\n<pre><code class=\"lang-js\">// Protractor\nbrowser.switchTo().frame(element(by.css(&#39;.demo-frame&#39;)).getWebElement());\n\n// TestCafe\n.switchToIframe(&#39;.demo-frame&#39;);\n</code></pre></li>\n<li><p><a class=\"xref\" href=\"/documentation/402833/guides/basic-guides/test-actions#wait\">Wait before an action</a>.</p>\n<pre><code class=\"lang-js\">// Protractor\nbrowser.wait(condition, 1000);\n\n// TestCafe\n.wait(1000);\n</code></pre></li>\n</ul>\n<p><strong>See Also</strong>: <a class=\"xref\" href=\"/documentation/402833/guides/basic-guides/test-actions\">All TestCafe actions</a></p>\n<h3 id=\"assertions__$\"><a class=\"anchor-fix\" href=\"#assertions\" id=\"assertions\"></a>Assertions<a class=\"anchor-hash\" href=\"#assertions\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\n<p>TestCafe has a set of predefined <a class=\"xref\" href=\"/documentation/402837/guides/basic-guides/assertions\">assertions</a> and supports third-party assertion libraries as npm dependencies. </p>\n<p>TestCafe uses the <a class=\"xref\" href=\"/documentation/402827/guides/advanced-guides/built-in-wait-mechanisms\">built-in wait mechanism</a> and recalculates the actual value until it matches the expected value or an <a class=\"xref\" href=\"/documentation/402837/guides/basic-guides/assertions\">assertion timeout</a> expires. To execute an assertion, call the <a class=\"xref\" href=\"/documentation/402702/reference/test-api/testcontroller/expect\">t.expect</a> method followed by an assertion method with parameters.</p>\n<ul>\n<li><p>Asserts that the actual value equals the expected value (the <a class=\"xref\" href=\"/documentation/402728/reference/test-api/testcontroller/expect/eql\">eql</a> assertion).</p>\n<pre><code class=\"lang-js\">// Protractor\nexpect({ a: &#39;bar&#39; }).toEqual({ a: &#39;bar&#39; }); \n\n// TestCafe\nawait t .expect({ a: &#39;bar&#39; }).eql({ a: &#39;bar&#39; }) \n</code></pre></li>\n<li><p>Asserts that the actual value is true (the <a class=\"xref\" href=\"/documentation/402716/reference/test-api/testcontroller/expect/ok\">ok</a> assertion).</p>\n<pre><code class=\"lang-js\">// Protractor\nexpect(&#39;ok&#39;).toBeTruthy(); \n\n// TestCafe\nawait t .expect(&#39;ok&#39;).ok() \n</code></pre></li>\n<li><p>Asserts that the actual value contains the expected value (the <a class=\"xref\" href=\"/documentation/402729/reference/test-api/testcontroller/expect/contains\">contains</a> assertion).</p>\n<pre><code class=\"lang-js\">// Protractor\nexpect(&#39;foo bar&#39;).toContain(&#39;bar&#39;);\n\n// TestCafe\nawait t .expect(&#39;foo bar&#39;).contains(&#39;bar&#39;) \n</code></pre></li>\n<li><p>Asserts that the actual type is the expected type (the <a class=\"xref\" href=\"/documentation/402715/reference/test-api/testcontroller/expect/typeof\">typeOf</a> assertion). </p>\n<pre><code class=\"lang-js\">// Protractor\nexpect(typeof { a: &#39;bar&#39; }).toBe(&#39;object&#39;); \n\n// TestCafe\nawait t .expect({ a: &#39;bar&#39; }).typeOf(&#39;object&#39;)\n</code></pre></li>\n</ul>\n<p><strong>See Also</strong>: <a class=\"xref\" href=\"/documentation/402837/guides/basic-guides/assertions\">All TestCafe Assertions</a></p>\n<h3 id=\"hooks__$\"><a class=\"anchor-fix\" href=\"#hooks\" id=\"hooks\"></a>Hooks<a class=\"anchor-hash\" href=\"#hooks\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\n<p>TestCafe can run reusable code sequences before or after tests and fixtures: <a class=\"xref\" href=\"/documentation/403435/guides/intermediate-guides/hooks#hooks-before-and-after-tests\">Test hooks</a> and <a class=\"xref\" href=\"/documentation/403435/guides/intermediate-guides/hooks#hooks-before-and-after-fixtures\">Fixture hooks</a>. Define the “before” and “after” hooks globally in the <a class=\"xref\" href=\"/documentation/402638/reference/configuration-file#hooks\">configuration file</a> or in an individual test or fixture.</p>\n<pre><code class=\"lang-js\">// Protractor\ndescribe(&#39;hooks&#39;, function() { \n    before(function() { \n        // runs once before the first test in this block \n    }); \n\n    after(function() { \n        // runs once after the last test in this block \n    }); \n\n    beforeEach(function() { \n        // runs before each test in this block \n    }); \n\n    afterEach(function() { \n    // runs after each test in this block \n    }); \n    // test cases \n});    \n\n// TestCafe\nfixture`Hooks` \n    .before(() =&gt; { \n        // runs once before the first test in this fixture \n    }) \n    .after(() =&gt; { \n        // runs once after the last test in this fixture \n    }) \n    .beforeEach(() =&gt; { \n        // runs before each test in this fixture \n    }) \n    .afterEach(() =&gt; { \n        // runs after each test in this fixture \n    }); \n\ntest \n    .before(() =&gt; { \n        // runs before each test \n    }) \n    .after(() =&gt; { \n        // runs after each test \n    }) \n    (&#39;test&#39;, () =&gt; { \n        // test cases \n    }) \n</code></pre><p><strong>See Also</strong>: </p>\n<ul>\n<li><a class=\"xref\" href=\"/documentation/403435/guides/intermediate-guides/hooks\">Hooks</a></li>\n<li><a class=\"xref\" href=\"/documentation/402669/reference/test-api/requesthook\">RequestHook Class</a></li>\n</ul>\n<h2 id=\"more-capabilities__$\"><a class=\"anchor-fix\" href=\"#more-capabilities\" id=\"more-capabilities\"></a>More Capabilities<a class=\"anchor-hash\" href=\"#more-capabilities\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p><a class=\"xref\" href=\"/documentation/402635/guides/overview/getting-started\">TestCafe documentation</a> helps you get more details about the API, FAQ, common concepts, step-by-step guides and best practices. These resources allow you to migrate Protractor tests to TestCafe as easily as possible. </p>\n<h2 id=\"run-tests__$\"><a class=\"anchor-fix\" href=\"#run-tests\" id=\"run-tests\"></a>Run Tests<a class=\"anchor-hash\" href=\"#run-tests\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>To run TestCafe tests, execute the following Angular CLI command. The command below starts a new browser window with a clean profile (for example, without extensions or profile settings). In this case, TestCafe ignores custom settings and runs more stable tests.</p>\n<pre><code>ng e2e \n</code></pre><p>You can also use <a class=\"xref\" href=\"/documentation/402639/reference/command-line-interface\">TestCafe CLI</a> to run TestCafe tests with different settings. For example, to run tests in parallel, use the ‘testcafe’ command with the <code>-c</code> flag, specify a browser and which number of browser instances to invoke.</p>\n<pre><code>testcafe -c 3 chrome tests/sample-fixture.js \n</code></pre><p><strong>See Also</strong>: <a class=\"xref\" href=\"/documentation/403626/guides/intermediate-guides/run-tests-concurrently\">Run Tests Concurrently</a></p>\n<h2 id=\"debug-tests__$\"><a class=\"anchor-fix\" href=\"#debug-tests\" id=\"debug-tests\"></a>Debug Tests<a class=\"anchor-hash\" href=\"#debug-tests\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>You can pause tests to examine a web page and troubleshoot errors.</p>\n<p>The <a class=\"xref\" href=\"/documentation/402638/reference/configuration-file#speed\">--speed</a> flag specifies the test execution speed.</p>\n<pre><code>testcafe chrome ./my-tests --speed 0.1 \n</code></pre><p>Use any of the following test controller methods and CLI flags to switch a test to debug mode:</p>\n<ul>\n<li><p><a class=\"xref\" href=\"/documentation/402639/reference/command-line-interface#-d---debug-mode\">--debug-mode</a> - Pauses test execution before the first action or assertion. So that, you can invoke the developer tools and then debug.</p>\n</li>\n<li><p><a class=\"xref\" href=\"/documentation/402639/reference/command-line-interface#--debug-on-fail\">--debug-on-fail</a> - Enters debug mode when a test fails.</p>\n</li>\n<li><p><a class=\"xref\" href=\"/documentation/402707/reference/test-api/testcontroller/debug\">t.debug</a> - Pauses the test and allows you to use the browser’s developer tools. </p>\n</li>\n</ul>\n<pre><code class=\"lang-js\">fixture `Debugger example` \n .page `http://devexpress.github.io/testcafe/example/`; \n\ntest(&#39;Debugger&#39;, async t =&gt; { \n await t \n   .debug(); \n}); \n</code></pre>","headers":[{"title":"Install and Setup TestCafe","tagName":"h2","id":"install-and-setup-testcafe","lvl":2},{"title":"Test Structure","tagName":"h2","id":"test-structure","lvl":2},{"title":"Get DOM Elements","tagName":"h2","id":"get-dom-elements","lvl":2},{"title":"Interact with DOM Elements","tagName":"h2","id":"interact-with-dom-elements","lvl":2},{"title":"More Capabilities","tagName":"h2","id":"more-capabilities","lvl":2},{"title":"Run Tests","tagName":"h2","id":"run-tests","lvl":2},{"title":"Debug Tests","tagName":"h2","id":"debug-tests","lvl":2}],"title":"Migrate Tests from Protractor to TestCafe","schema":null,"author":null,"preview":null,"description":null,"published":null},"topicUid":"403554","headerNav":{"items":[{"name":"TestCafe Studio","id":"TestCafe Studio"},{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started","items":[]},{"name":"API","id":"402632","url":"/documentation/402632/api","items":[]},{"name":"Recipes","id":"402633","url":"/documentation/402633/recipes","items":[]},{"name":"Examples","id":"402637","url":"/documentation/402637/examples"},{"name":"FAQ","id":"403936","url":"/documentation/403936/faq","headerUrl":"/documentation/402636/faq/general-info","items":[]},{"name":"What's New","id":"What's New","url":"/release-notes","href":"/release-notes","items":[]},{"name":"Dashboard Alpha","id":"Dashboard Alpha","items":[]},{"name":"Support","id":"Support","url":"/support","href":"/support"}],"activeItems":[{"name":"Recipes","id":"402633","url":"/documentation/402633/recipes"},{"name":"Migration","id":"402633/Migration"},{"name":"Migrate Tests from Protractor to TestCafe","id":"403554","url":"/documentation/403554/recipes/migration/migrate-tests-from-protractor-to-testcafe"}]},"sidebarNav":{"root":{"name":"Recipes","id":"402633","url":"/documentation/402633/recipes"},"items":[{"name":"Basics","id":"402633/Basics","items":[{"name":"Selector Recipes","id":"403654","url":"/documentation/403654/recipes/basics/selector-recipes"},{"name":"Test <select> Elements","id":"402806","url":"/documentation/402806/recipes/basics/test-select-elements"},{"name":"Test Static HTML Pages","id":"402805","url":"/documentation/402805/recipes/basics/test-static-html-pages"},{"name":"Test on Remote Computers and Mobile Devices","id":"402807","url":"/documentation/402807/recipes/basics/test-on-remote-computers-and-mobile-devices"},{"name":"Test File Upload","id":"402808","url":"/documentation/402808/recipes/basics/test-file-upload"}]},{"name":"Best Practices","id":"402633/Best Practices","items":[{"name":"Create Helpers","id":"402803","url":"/documentation/402803/recipes/best-practices/create-helpers"},{"name":"Create Data-Driven Tests","id":"402804","url":"/documentation/402804/recipes/best-practices/create-data-driven-tests"}]},{"name":"Integrations","id":"402633/Integrations","items":[{"name":"Import Third-Party Modules","id":"402795","url":"/documentation/402795/recipes/integrations/import-third-party-modules"},{"name":"Use Testing Library API","id":"402792","url":"/documentation/402792/recipes/integrations/use-testing-library-api"},{"name":"Use the Angular CLI Builder","id":"402793","url":"/documentation/402793/recipes/integrations/use-angular-cli-builder"},{"name":"Use TestCafe with Gulp","id":"402796","url":"/documentation/402796/recipes/integrations/gulp"},{"name":"Use TestCafe with Grunt","id":"402797","url":"/documentation/402797/recipes/integrations/grunt"},{"name":"Test Websites That Use reCAPTCHA","id":"402794","url":"/documentation/402794/recipes/integrations/test-websites-that-use-recaptcha"},{"name":"Find Code Issues with Flow Type Checker","id":"402798","url":"/documentation/402798/recipes/integrations/find-code-issues-with-flow-type-checker"}]},{"name":"Configuration","id":"402633/Configuration","items":[{"name":"Access Environment Variables in Tests","id":"402802","url":"/documentation/402802/recipes/configuration/access-environment-variables-in-tests"},{"name":"Grant or Fix TestCafe Permissions on macOS","id":"404111","url":"/documentation/404111/recipes/debugging/macos-permissions"}]},{"name":"Debugging","id":"402633/Debugging","items":[{"name":"Debug Tests in Chrome Developer Tools","id":"402801","url":"/documentation/402801/recipes/debugging/chrome-dev-tools"},{"name":"Debug Tests in Visual Studio Code","id":"402800","url":"/documentation/402800/recipes/debugging/visual-studio-code"},{"name":"Debug Tests in WebStorm","id":"402799","url":"/documentation/402799/recipes/debugging/webstorm"},{"name":"Skip JavaScript Errors","id":"404038","url":"/documentation/404038/recipes/debugging/skip-javascript-errors"}]},{"name":"Migration","id":"402633/Migration","items":[{"name":"TestCafe 2.0 Migration Guide","id":"404017","url":"/documentation/404017/recipes/migration/testcafe-2-0-migration-guide"},{"name":"Migrate Tests from Protractor to TestCafe","id":"403554","url":"/documentation/403554/recipes/migration/migrate-tests-from-protractor-to-testcafe"}]}],"activeItems":[{"name":"Recipes","id":"402633","url":"/documentation/402633/recipes"},{"name":"Migration","id":"402633/Migration"},{"name":"Migrate Tests from Protractor to TestCafe","id":"403554","url":"/documentation/403554/recipes/migration/migrate-tests-from-protractor-to-testcafe"}],"showLeafs":false},"breadcrumbsNav":[{"name":"Recipes","id":"402633","url":"/documentation/402633/recipes"},{"name":"Migration","id":"402633/Migration"},{"name":"Migrate Tests from Protractor to TestCafe","id":"403554","url":"/documentation/403554/recipes/migration/migrate-tests-from-protractor-to-testcafe"}],"publishDates":{"teamBlog":[1667260800000,1661889600000,1657569600000,1637107200000,1633550400000,1632254400000,1626206400000,1612814400000,1609113600000,1607644800000,1605657600000,1605571200000,1600905600000,1599076800000,1598385600000,1597953600000,1597780800000,1595966400000,1594670400000,1593460800000,1590350400000,1587326400000],"releaseNotes}},"__N_SSG":true}