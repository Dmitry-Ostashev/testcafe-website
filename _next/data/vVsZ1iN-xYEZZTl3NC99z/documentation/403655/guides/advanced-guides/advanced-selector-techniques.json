{"pageProps":{"content":{"html":"        <h1>Advanced Selector Techniques</h1>\n\n<h2 id=\"extend-the-selector-class__$\"><a class=\"anchor-fix\" href=\"#extend-the-selector-class\" id=\"extend-the-selector-class\"></a>Extend the Selector class<a class=\"anchor-hash\" href=\"#extend-the-selector-class\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>You can extend the Selector class with custom properties and methods. This is necessary to implement framework-specific API and retrieve DOM element properties unavailable out of the box.</p>\n<p>To add a new method, pass a client function to the <a class=\"xref\" href=\"/documentation/402758/reference/test-api/selector/addcustommethods\">addCustomMethods</a> method. To add a new property, pass a client function to the <a class=\"xref\" href=\"/documentation/402759/reference/test-api/selector/addcustomdomproperties\">addCustomDOMProperties</a> method.</p>\n<pre><code class=\"lang-js\">import { Selector } from &#39;testcafe&#39;;\n\nfixture `My fixture`\n    .page `https://devexpress.github.io/testcafe/example/`;\n\ntest(&#39;Check Label HTML&#39;, async t =&gt; {\n    let fieldSet = Selector(&#39;fieldset&#39;).addCustomMethods({\n        getLabel: (el, idx) =&gt; {\n            return el[0].elements[idx].labels[0];\n        }\n    }, {\n        returnDOMNodes: true\n    });\n\n    await t.expect(fieldSet.nth(1).getLabel(3).textContent).eql(&#39;Easy embedding into a Continuous integration system&#39;);\n\n    fieldSet = fieldSet.addCustomDOMProperties({\n        legend: el =&gt; el.querySelector(&#39;legend&#39;).innerText\n    });\n\n    await t.expect(fieldSet.nth(1).legend).eql(&#39;Which features are important to you:&#39;);\n});\n</code></pre><p>Custom properties and methods propagate through the selector chain. If you define <code>selector.myProperty</code>, you can access it further down the chain: <code>selector.nth(2).myProperty</code>, <code>selector.withText(&#39;ABC&#39;).myProperty</code>.</p>\n<h2 id=\"execute-selectors-inside-nodejs-callbacks__$\"><a class=\"anchor-fix\" href=\"#execute-selectors-inside-nodejs-callbacks\" id=\"execute-selectors-inside-nodejs-callbacks\"></a>Execute Selectors inside Node.js Callbacks<a class=\"anchor-hash\" href=\"#execute-selectors-inside-nodejs-callbacks\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>Selectors need access to the <a class=\"xref\" href=\"/documentation/402665/reference/test-api/testcontroller\">test controller</a> object. Selectors inside the test function implicitly obtain this access.</p>\n<p>To execute a Selector query from a Node.js callback, bind it to the test controller with the <a class=\"xref\" href=\"/documentation/402743/reference/test-api/selector/with#optionsboundtestrun\">boundTestRun</a> option.</p>\n<pre><code class=\"lang-js\">import { http } from &#39;http&#39;;\nimport { Selector } from &#39;testcafe&#39;;\n\nfixture `My fixture`\n    .page `http://www.example.com/`;\n\nconst elementWithId = Selector(id =&gt; document.getElementById(id));\n\ntest(&#39;Title changed&#39;, async t =&gt; {\n    const boundSelector = elementWithId.with({ boundTestRun: t });\n\n    // Performs an HTTP request that changes the article title.\n    // Resolves to a value indicating whether the title has been changed.\n    const match = await new Promise(resolve =&gt; {\n        const req = http.request(/* request options */, res =&gt; {\n            if(res.statusCode === 200) {\n                boundSelector(&#39;article-title&#39;).then(titleEl =&gt; {\n                    resolve(titleEl.textContent === &#39;New title&#39;);\n                });\n            }\n        });\n\n        req.write(title)\n        req.end();\n    });\n\n    await t.expect(match).ok();\n});\n</code></pre><p>To ensure that TestCafe triggers the callback function before the test ends, suspend the test until then. For instance, you can introduce a Promise and synchronously wait until it completes, as shown in the example above.</p>\n<div class=\"NOTE\"><p class=\"alert-title\">Note</p><p>The <code>boundTestRun</code> option requires the same test controller instance that is passed to the function used in the test declaration. It cannot work with imported test controllers.</p>\n</div>\n<h2 id=\"select-elements-with-dynamic-ids__$\"><a class=\"anchor-fix\" href=\"#select-elements-with-dynamic-ids\" id=\"select-elements-with-dynamic-ids\"></a>Select Elements With Dynamic IDs<a class=\"anchor-hash\" href=\"#select-elements-with-dynamic-ids\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>Well-written Selectors use element identifiers that persist between test runs. While the <code>id</code> attribute may seem suitable for this purpose, many JavaScript frameworks generate dynamic element IDs. If your project contains dynamic IDs, write Selectors that reference class, content, tag name, or position instead.</p>\n<p>Below is the list of Selector methods that can locate action targets without referencing their IDs:</p>\n<ul>\n<li><a class=\"xref\" href=\"/documentation/402740/reference/test-api/selector/withtext\">withText</a></li>\n<li><a class=\"xref\" href=\"/documentation/402741/reference/test-api/selector/withexacttext\">withExactText</a>,</li>\n<li><a class=\"xref\" href=\"/documentation/402742/reference/test-api/selector/withattribute\">withAttribute</a>,</li>\n<li><a class=\"xref\" href=\"/documentation/402747/reference/test-api/selector/parent\">parent</a>,</li>\n<li><a class=\"xref\" href=\"/documentation/402757/reference/test-api/selector/child\">child</a>,</li>\n<li><a class=\"xref\" href=\"/documentation/402744/reference/test-api/selector/sibling\">sibling</a>,</li>\n<li><a class=\"xref\" href=\"/documentation/402749/reference/test-api/selector/nextsibling\">nextSibling</a>,</li>\n<li><a class=\"xref\" href=\"/documentation/402746/reference/test-api/selector/prevsibling\">prevSibling</a></li>\n</ul>\n<p><strong>Example</strong></p>\n<pre><code class=\"lang-html\">&lt;html&gt;\n    &lt;body&gt;\n        &lt;div id=&quot;j9dk399sd304&quot; class=&quot;container&quot;&gt;\n            &lt;div id=&quot;dsf054k45o3e&quot;&gt;Item 1&lt;/div&gt;\n            &lt;div id=&quot;lk94km904wfv&quot;&gt;Item 2&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-js\">import { Selector } from &#39;testcafe&#39;;\n\nfixture `My fixture`\n    .page `http://localhost/`;\n\ntest(&#39;My test&#39;, async t =&gt; {\n    const container = Selector(&#39;div&#39;).withAttribute(&#39;class&#39;, &#39;container&#39;);\n    const item1     = Selector(&#39;div&#39;).withText(&#39;Item 1&#39;);\n    const item2     = container.child(1);\n});\n</code></pre><p>If a part of ID remains static, you can still target it with the help of the following workarounds:</p>\n<ul>\n<li><a class=\"xref\" href=\"/documentation/402742/reference/test-api/selector/withattribute\">withAttribute(RegExp)</a></li>\n<li><a href=\"https://www.w3schools.com/cssref/sel_attribute_value_contains.php\" target=\"_blank\">[attribute~=value]<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a></li>\n<li><a href=\"https://www.w3schools.com/cssref/sel_attribute_value_lang.php\" target=\"_blank\">[attribute|=value]<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>,</li>\n<li><a href=\"https://www.w3schools.com/cssref/sel_attr_begin.php\" target=\"_blank\">[attribute^=value]<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>,</li>\n<li><a href=\"https://www.w3schools.com/cssref/sel_attr_end.php\" target=\"_blank\">[attribute$=value]<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>,</li>\n<li><a href=\"https://www.w3schools.com/cssref/sel_attr_contain.php\" target=\"_blank\">[attribute*=value]<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a></li>\n</ul>\n<p><strong>Example</strong></p>\n<pre><code class=\"lang-html\">&lt;html&gt;\n    &lt;body&gt;\n        &lt;div id=&quot;9fgk309d3-wrapper-9f&quot;&gt;\n            &lt;div id=&quot;g99dsf99sdfg-container&quot;&gt;\n                &lt;div id=&quot;item-df9f9sfd9fd9&quot;&gt;Item&lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-js\">import { Selector } from &#39;testcafe&#39;;\n\nfixture `My fixture`\n    .page `http://localhost/`;\n\ntest(&#39;My test&#39;, async t =&gt; {\n    const wrapper   = Selector(&#39;div&#39;).withAttribute(&#39;id&#39;, /\\w+-wrapper-\\w+/);\n    const container = Selector(&#39;[id$=&quot;container&quot;]&#39;);\n    const item      = Selector(&#39;[id|=&quot;item&quot;]&#39;);\n});\n</code></pre>","headers":[{"title":"Extend the Selector class","tagName":"h2","id":"extend-the-selector-class","lvl":2},{"title":"Execute Selectors inside Node.js Callbacks","tagName":"h2","id":"execute-selectors-inside-nodejs-callbacks","lvl":2},{"title":"Select Elements With Dynamic IDs","tagName":"h2","id":"select-elements-with-dynamic-ids","lvl":2}],"title":"Advanced Selector Techniques","schema":null,"author":null,"preview":null,"description":null,"published":null},"topicUid":"403655","headerNav":{"items":[{"name":"TestCafe Studio","id":"TestCafe Studio"},{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started","items":[]},{"name":"API","id":"402632","url":"/documentation/402632/api","items":[]},{"name":"Recipes","id":"402633","url":"/documentation/402633/recipes","items":[]},{"name":"Examples","id":"402637","url":"/documentation/402637/examples"},{"name":"FAQ","id":"403936","url":"/documentation/403936/faq","headerUrl":"/documentation/402636/faq/general-info","items":[]},{"name":"What's New","id":"What's New","url":"/resources/release-notes","href":"/resources/release-notes","items":[]},{"name":"Dashboard Alpha","id":"Dashboard Alpha","items":[]},{"name":"Support","id":"Support","url":"/support","href":"/support"}],"activeItems":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Advanced Guides","id":"402634/Advanced Guides"},{"name":"Advanced Selector Techniques","id":"403655","url":"/documentation/403655/guides/advanced-guides/advanced-selector-techniques"}]},"sidebarNav":{"root":{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},"items":[{"name":"Overview","id":"402634/Overview","items":[{"name":"Getting Started","id":"402635","url":"/documentation/402635/guides/overview/getting-started"},{"name":"Why TestCafe?","id":"402631","url":"/documentation/402631/guides/overview/why-testcafe"}]},{"name":"Basic Guides","id":"402634/Basic Guides","items":[{"name":"Install TestCafe","id":"402834","url":"/documentation/402834/guides/basic-guides/install-testcafe"},{"name":"Test Structure","id":"402831","url":"/documentation/402831/guides/basic-guides/test-structure"},{"name":"Element Selectors","id":"402829","url":"/documentation/402829/guides/basic-guides/element-selectors"},{"name":"Test Actions","id":"402833","url":"/documentation/402833/guides/basic-guides/test-actions"},{"name":"Assertions","id":"402837","url":"/documentation/402837/guides/basic-guides/assertions"},{"name":"Client Functions","id":"402832","url":"/documentation/402832/guides/basic-guides/client-functions"},{"name":"Run Tests","id":"402830","url":"/documentation/402830/guides/basic-guides/run-tests"},{"name":"Debug Tests","id":"402835","url":"/documentation/402835/guides/basic-guides/debug-tests"}]},{"name":"Best Practices","id":"402634/Best Practices","items":[{"name":"Best Practices","id":"402836","url":"/documentation/402836/guides/best-practices/best-practices"},{"name":"Speed Up Test Execution","id":"402963","url":"/documentation/402963/guides/best-practices/speed-up-test-execution"},{"name":"Page Model","id":"402826","url":"/documentation/402826/guides/best-practices/page-model"},{"name":"Bootstrap your TestCafe project with create-testcafe","id":"404259","url":"/documentation/404259/guides/best-practices/create-testcafe"}]},{"name":"Intermediate Guides","id":"402634/Intermediate Guides","items":[{"name":"Browsers","id":"402828","url":"/documentation/402828/guides/intermediate-guides/browsers"},{"name":"Mobile Devices, Cloud Browsers and Emulation","id":"403584","url":"/documentation/403584/guides/intermediate-guides/mobile-devices-cloud-browsers-and-emulation"},{"name":"Native Automation Mode","id":"404237","url":"/documentation/404237/guides/intermediate-guides/native-automation-mode"},{"name":"Visual Selector Debugger","id":"404288","url":"/documentation/404288/guides/intermediate-guides/visual-selector-debugger"},{"name":"Run Tests Concurrently","id":"403626","url":"/documentation/403626/guides/intermediate-guides/run-tests-concurrently"},{"name":"Reporters","id":"402825","url":"/documentation/402825/guides/intermediate-guides/reporters"},{"name":"TypeScript and CoffeeScript","id":"402824","url":"/documentation/402824/guides/intermediate-guides/typescript-and-coffeescript"},{"name":"Authentication and Roles","id":"402845","url":"/documentation/402845/guides/intermediate-guides/authentication"},{"name":"Screenshots and Videos","id":"402840","url":"/documentation/402840/guides/intermediate-guides/screenshots-and-videos"},{"name":"API Testing","id":"403971","url":"/documentation/403971/guides/intermediate-guides/api-testing"},{"name":"Hooks","id":"403435","url":"/documentation/403435/guides/intermediate-guides/hooks"},{"name":"Quarantine Mode","id":"403841","url":"/documentation/403841/guides/intermediate-guides/quarantine-mode"},{"name":"Live Mode","id":"403842","url":"/documentation/403842/guides/intermediate-guides/live-mode"},{"name":"Intercept HTTP Requests","id":"402842","url":"/documentation/402842/guides/intermediate-guides/intercept-http-requests"},{"name":"Metadata and Filtering","id":"403436","url":"/documentation/403436/guides/intermediate-guides/metadata-and-filtering"},{"name":"Multiple Browser Windows","id":"402841","url":"/documentation/402841/guides/intermediate-guides/multiple-browser-windows"}]},{"name":"Advanced Guides","id":"402634/Advanced Guides","items":[{"name":"Advanced Selector Techniques","id":"403655","url":"/documentation/403655/guides/advanced-guides/advanced-selector-techniques"},{"name":"Inject Client Scripts","id":"402843","url":"/documentation/402843/guides/advanced-guides/inject-client-scripts"},{"name":"ESM Module Support","id":"404258","url":"/documentation/404258/guides/advanced-guides/esm-module-support"},{"name":"Create Custom Test Actions","id":"404150","url":"/documentation/404150/guides/advanced-guides/custom-test-actions"},{"name":"Fire DOM Events","id":"403219","url":"/documentation/403219/guides/advanced-guides/fire-dom-events"},{"name":"Execute Shell Commands on Startup","id":"403849","url":"/documentation/403849/guides/advanced-guides/execute-shell-commands-on-startup"},{"name":"Test HTTPS Features and HTTP/2 Websites","id":"402839","url":"/documentation/402839/guides/advanced-guides/test-https-features-and-http2-websites"},{"name":"Modify Reporter Output","id":"404388","url":"/documentation/404388/guides/advanced-guides/modify-reporter-output"},{"name":"Detect the Client Browser and Platform","id":"402844","url":"/documentation/402844/guides/advanced-guides/detect-the-client-browser-and-platform"},{"name":"Use the TestCafe Docker Image","id":"402838","url":"/documentation/402838/guides/advanced-guides/use-testcafe-docker-image"},{"name":"Built-In Wait Mechanisms","id":"402827","url":"/documentation/402827/guides/advanced-guides/built-in-wait-mechanisms"},{"name":"Replay Chrome User Flow Recordings","id":"403998","url":"/documentation/403998/guides/advanced-guides/chrome-replay-support"}]},{"name":"Experimental Capabilities","id":"403997","url":"/documentation/403997/guides/experimental-capabilities","items":[{"name":"Selector Debugging","id":"403999","url":"/documentation/403999/guides/experimental-capabilities/selector-debugging"}]},{"name":"Continuous Integration","id":"402809","url":"/documentation/402809/guides/continuous-integration","items":[{"name":"Integrate TestCafe with AppVeyor","id":"402823","url":"/documentation/402823/guides/continuous-integration/appveyor"},{"name":"Integrate TestCafe with Azure DevOps","id":"402822","url":"/documentation/402822/guides/continuous-integration/azure-devops"},{"name":"Run Tests in Bitbucket Pipelines","id":"402821","url":"/documentation/402821/guides/continuous-integration/bitbucket-pipelines"},{"name":"Integrate TestCafe With CircleCI","id":"402819","url":"/documentation/402819/guides/continuous-integration/circleci"},{"name":"Run Tests on LambdaTest with CircleCI","id":"402820","url":"/documentation/402820/guides/continuous-integration/circleci-and-lambdatest"},{"name":"Integrate TestCafe with GitHub Actions","id":"402817","url":"/documentation/402817/guides/continuous-integration/github-actions"},{"name":"Run Tests on BrowserStack with GitHub Actions","id":"402818","url":"/documentation/402818/guides/continuous-integration/github-actions-and-browserstack"},{"name":"Integrate TestCafe with GitLab","id":"402816","url":"/documentation/402816/guides/continuous-integration/gitlab"},{"name":"Integrate TestCafe with Jenkins","id":"402815","url":"/documentation/402815/guides/continuous-integration/jenkins"},{"name":"Integrate TestCafe with TeamCity","id":"402847","url":"/documentation/402847/guides/continuous-integration/teamcity"},{"name":"Run Tests in Travis CI","id":"402813","url":"/documentation/402813/guides/continuous-integration/travis"},{"name":"Run Tests on Sauce Labs with Travis CI","id":"402814","url":"/documentation/402814/guides/continuous-integration/travis-and-sauce-labs"}]},{"name":"Extend TestCafe","id":"402634/Extend TestCafe","items":[{"name":"Install Plugins","id":"402811","url":"/documentation/402811/guides/extend-testcafe/install-plugins"},{"name":"Reporter Plugin","id":"402810","url":"/documentation/402810/guides/extend-testcafe/reporter-plugin"},{"name":"Browser Provider Plugin","id":"402812","url":"/documentation/402812/guides/extend-testcafe/browser-provider-plugin"}]}],"activeItems":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Advanced Guides","id":"402634/Advanced Guides"},{"name":"Advanced Selector Techniques","id":"403655","url":"/documentation/403655/guides/advanced-guides/advanced-selector-techniques"}],"showLeafs":true},"breadcrumbsNav":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Advanced Guides","id":"402634/Advanced Guides"},{"name":"Advanced Selector Techniques","id":"403655","url":"/documentation/403655/guides/advanced-guides/advanced-selector-techniques"}],"publishDates":{"teamBlog":[1667260800000,1661889600000,1657569600000,1637107200000,1633550400000,1632254400000,1626206400000,1612814400000,1609113600000,1607644800000,1605657600000,1605571200000,1600905600000,1599076800000,1598385600000,1597953600000,1597780800000,1595966400000,1594670400000,1593460800000,1590350400000,1587326400000],"releaseNotes}},"__N_SSG":true}