{"pageProps":{"content":{"html":"        <h1>Client Functions</h1>\n\n<div class=\"IMPORTANT\"><p class=\"alert-title\">Important</p><p>Do not use client functions to permanently alter website behavior. Use <a class=\"xref\" href=\"/documentation/402843/guides/advanced-guides/inject-client-scripts\">client scripts</a> to inject libraries and helper functions into the page.</p>\n</div>\n<h2 id=\"article-summary__$\"><a class=\"anchor-fix\" href=\"#article-summary\" id=\"article-summary\"></a>Article Summary<a class=\"anchor-hash\" href=\"#article-summary\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>Create a <strong>client function</strong> to <a href=\"#common-use-cases\">run custom client-side code</a> and obtain page data. Client functions can return any serializable value from the browser, such as the current URL.</p>\n<p>Use the <a class=\"xref\" href=\"/documentation/402789/reference/test-api/clientfunction/constructor\">ClientFunction</a> constructor to create a client function. Client functions can be <a href=\"#include-asynchronous-code\">asynchronous</a> and accept <a href=\"#specify-parameters\">parameters</a>.</p>\n<pre><code class=\"lang-js\">import { ClientFunction } from &#39;testcafe&#39;;\nconst getWindowLocation = ClientFunction(() =&gt; window.location);\n</code></pre><p>You can execute client functions within <a class=\"xref\" href=\"/documentation/403366/reference/test-api/test\">the test body</a>, <a class=\"xref\" href=\"/documentation/403435/guides/intermediate-guides/hooks\">test hooks</a>, and <a class=\"xref\" href=\"/documentation/402845/guides/intermediate-guides/authentication\">Role definitions</a>. Manually import the <a class=\"xref\" href=\"/documentation/402665/reference/test-api/testcontroller\">TestController</a> object to use client functions elsewhere.</p>\n<p>Call the client function with the <code>await</code> keyword to execute it.</p>\n<pre><code class=\"lang-js\">test(&#39;My Test&#39;, async t =&gt; {\n    const location = await getWindowLocation();\n});\n</code></pre><p>Alternatively, use the <a class=\"xref\" href=\"/documentation/402703/reference/test-api/testcontroller/eval\">t.eval</a> action:</p>\n<pre><code class=\"lang-js\">await t.eval(() =&gt; window.location);\n</code></pre><h2 id=\"table-of-contents__$\"><a class=\"anchor-fix\" href=\"#table-of-contents\" id=\"table-of-contents\"></a>Table of Contents<a class=\"anchor-hash\" href=\"#table-of-contents\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<ul>\n<li><a href=\"#common-use-cases\">Common Use Cases</a><ul>\n<li><a href=\"#practices-to-avoid\">Practices to Avoid</a></li>\n</ul>\n</li>\n<li><a href=\"#create-a-client-function\">Create a Client Function</a><ul>\n<li><a href=\"#include-asynchronous-code\">Include Asynchronous Code</a></li>\n<li><a href=\"#specify-parameters\">Specify Parameters</a></li>\n<li><a href=\"#specify-options-and-dependencies\">Specify Options and Dependencies</a></li>\n</ul>\n</li>\n<li><a href=\"#execute-client-functions\">Execute Client Functions</a><ul>\n<li><a href=\"#the-teval-test-action\">The t.eval test action</a></li>\n<li><a href=\"#trigger-client-functions-in-nodejs-callbacks\">Trigger Client Functions in Node.js Callbacks</a></li>\n</ul>\n</li>\n<li><a href=\"#limitations\">Limitations</a></li>\n<li><a href=\"#examples\">Examples</a><ul>\n<li><a href=\"#retrieve-page-url\">Retrieve Page URL</a></li>\n<li><a href=\"#execute-complex-dom-queries\">Execute complex DOM queries</a></li>\n<li><a href=\"#determine-text-direction\">Determine text direction</a></li>\n<li><a href=\"#select-page-text\">Select page text</a></li>\n<li><a href=\"#access-clipboard\">Access clipboard</a></li>\n<li><a href=\"#observe-page-events\">Observe page events</a></li>\n<li><a href=\"#obtain-the-value-of-an-option-element\">Obtain the value of an option element</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"common-use-cases__$\"><a class=\"anchor-fix\" href=\"#common-use-cases\" id=\"common-use-cases\"></a>Common Use Cases<a class=\"anchor-hash\" href=\"#common-use-cases\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>Client functions have two primary purposes.</p>\n<ul>\n<li>If you cannot extract page data with a <a class=\"xref\" href=\"/documentation/402829/guides/basic-guides/element-selectors\">Selector query</a>, use a ClientFunction to perform client-side calculations.</li>\n<li>If a combination of <a class=\"xref\" href=\"/documentation/402833/guides/basic-guides/test-actions\">standard test methods</a> cannot perform the page action you want, use a ClientFunction to interact with the page.</li>\n</ul>\n<p>See the <a href=\"#examples\">Examples</a> section to view code examples for common Client Function use cases.</p>\n<h3 id=\"practices-to-avoid__$\"><a class=\"anchor-fix\" href=\"#practices-to-avoid\" id=\"practices-to-avoid\"></a>Practices to Avoid<a class=\"anchor-hash\" href=\"#practices-to-avoid\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\n<ul>\n<li><p>Do not use client functions to perform common page actions. Use <a class=\"xref\" href=\"/documentation/402833/guides/basic-guides/test-actions\">test actions</a> instead.</p>\n</li>\n<li><p>Client functions increase the complexity of your test suite. Before you create a new Client Function, check if you can perform the same action with <a class=\"xref\" href=\"/documentation/403091/reference/test-api/testcontroller/dispatchevent\">custom DOM events</a>.</p>\n</li>\n<li><p>Do not use client functions to permanently alter website behavior. Use <a class=\"xref\" href=\"/documentation/402843/guides/advanced-guides/inject-client-scripts\">client scripts</a> to inject libraries and helper functions into the page.</p>\n</li>\n<li><p>Client functions cannot return DOM nodes. Use <a class=\"xref\" href=\"/documentation/402829/guides/basic-guides/element-selectors\">Selector queries</a> to inspect the DOM.</p>\n</li>\n</ul>\n<h2 id=\"create-a-client-function__$\"><a class=\"anchor-fix\" href=\"#create-a-client-function\" id=\"create-a-client-function\"></a>Create a Client Function<a class=\"anchor-hash\" href=\"#create-a-client-function\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>Use the <a class=\"xref\" href=\"/documentation/402789/reference/test-api/clientfunction/constructor\">ClientFunction</a> constructor to create a client function.</p>\n<pre><code class=\"lang-js\">import { ClientFunction } from &#39;testcafe&#39;;\nconst getWindowLocation = ClientFunction(() =&gt; window.location);\n</code></pre><h3 id=\"include-asynchronous-code__$\"><a class=\"anchor-fix\" href=\"#include-asynchronous-code\" id=\"include-asynchronous-code\"></a>Include Asynchronous Code<a class=\"anchor-hash\" href=\"#include-asynchronous-code\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\n<p>To run asynchronous client-side code, create a client function that returns a Promise. When you execute an asynchronous client function, TestCafe waits for the Promise to resolve.</p>\n<pre><code class=\"lang-js\">import { ClientFunction } from &#39;testcafe&#39;;\n\nconst performAsyncOperation = ClientFunction(() =&gt; {\n    return new Promise(resolve =&gt; {\n        window.setTimeout(resolve, 500); // asynchronous code\n    });\n});\n</code></pre><h3 id=\"specify-parameters__$\"><a class=\"anchor-fix\" href=\"#specify-parameters\" id=\"specify-parameters\"></a>Specify Parameters<a class=\"anchor-hash\" href=\"#specify-parameters\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\n<p>Client functions can accept parameters:</p>\n<pre><code class=\"lang-js\">import { ClientFunction } from &#39;testcafe&#39;;\n\nconst getLocationPart = ClientFunction(locationPart =&gt; {\n    return window.location[locationPart];\n});\n\nfixture (&#39;My fixture&#39;).page(&#39;http://www.example.com/&#39;);\n\ntest(&#39;Parameterized Client Functions&#39;, async t =&gt; {\n    const hostName = await getLocationPart(&#39;host&#39;);\n});\n</code></pre><h3 id=\"specify-options-and-dependencies__$\"><a class=\"anchor-fix\" href=\"#specify-options-and-dependencies\" id=\"specify-options-and-dependencies\"></a>Specify Options and Dependencies<a class=\"anchor-hash\" href=\"#specify-options-and-dependencies\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\n<p>Use the <code>dependencies</code> option to pass Selector queries, helper functions, and server-side data to the client function.</p>\n<pre><code class=\"lang-js\">const getUri = ClientFunction(() =&gt; {\n        return getDocumentURI();\n    }, dependencies: { /* dependencies go here */ } });\n</code></pre><p>Use the <a href=\"https://nodejs.org/api/modules.html#requireid\" target=\"_blank\">CommonJs<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> <code>require</code> syntax to access helper functions in your test file.</p>\n<p><strong>utils.js</strong></p>\n<pre><code class=\"lang-js\">export function getDocumentURI() {\n    return document.documentURI;\n}\n</code></pre><p><strong>test.js</strong></p>\n<pre><code class=\"lang-js\">import { ClientFunction } from &#39;testcafe&#39;;\n\nconst getDocumentURI = require(&#39;./utils.js&#39;).getDocumentURI;\n\nfixture(&#39;My fixture&#39;)\n    .page(&#39;http://devexpress.github.io/testcafe/example/&#39;);\n\ntest(&#39;My test&#39;, async t =&gt; {\n    const getUri = ClientFunction(() =&gt; {\n        return getDocumentURI();\n    }, { dependencies: { getDocumentURI } });\n\n    const uri = await getUri();\n\n    await t.expect(uri).eql(&#39;https://devexpress.github.io/testcafe/example/&#39;);\n});\n</code></pre><h4 id=\"override-client-function-options-and-dependencies__$\"><a class=\"anchor-fix\" href=\"#override-client-function-options-and-dependencies\" id=\"override-client-function-options-and-dependencies\"></a>Override Client Function Options and Dependencies<a class=\"anchor-hash\" href=\"#override-client-function-options-and-dependencies\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\n<p>Use the <a class=\"xref\" href=\"/documentation/402788/reference/test-api/clientfunction/with\">with</a> method to override client function options and dependencies:</p>\n<pre><code class=\"lang-js\">const cfWithDependency = cfWithoutDependency.with({\n    dependencies: { foo: &#39;bar&#39; }\n});\n</code></pre><h2 id=\"execute-client-functions__$\"><a class=\"anchor-fix\" href=\"#execute-client-functions\" id=\"execute-client-functions\"></a>Execute Client Functions<a class=\"anchor-hash\" href=\"#execute-client-functions\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>You can execute client functions in any part of the test that can contain test actions — be it <a class=\"xref\" href=\"/documentation/403366/reference/test-api/test\">test body</a>, <a class=\"xref\" href=\"/documentation/403435/guides/intermediate-guides/hooks\">test hooks</a>, or helper files.</p>\n<p>Call the client function with the <code>await</code> keyword to execute it.</p>\n<pre><code class=\"lang-js\">import { ClientFunction } from &#39;testcafe&#39;;\n\nconst getWindowLocation = ClientFunction(() =&gt; window.location);\n\nfixture(&#39;My fixture&#39;)\n    .page `http://www.example.com/`;\n\ntest(&#39;My Test&#39;, async t =&gt; {\n    const location = await getWindowLocation();\n});\n</code></pre><h3 id=\"the-teval-test-action__$\"><a class=\"anchor-fix\" href=\"#the-teval-test-action\" id=\"the-teval-test-action\"></a>The t.eval test action<a class=\"anchor-hash\" href=\"#the-teval-test-action\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\n<p>Use the <a class=\"xref\" href=\"/documentation/402703/reference/test-api/testcontroller/eval\">t.eval</a> action to execute client-side functions that you did not define beforehand.</p>\n<pre><code class=\"lang-js\">test(&#39;My Test&#39;, async t =&gt; {\n    const docURI = await t.eval(() =&gt; document.documentURI);\n});\n</code></pre><h3 id=\"trigger-client-functions-in-nodejs-callbacks__$\"><a class=\"anchor-fix\" href=\"#trigger-client-functions-in-nodejs-callbacks\" id=\"trigger-client-functions-in-nodejs-callbacks\"></a>Trigger Client Functions in Node.js callbacks<a class=\"anchor-hash\" href=\"#trigger-client-functions-in-nodejs-callbacks\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\n<p>Client functions require access to the <a class=\"xref\" href=\"/documentation/402665/reference/test-api/testcontroller\">TestController</a> object. Client functions inside the test implicitly obtain this access. Follow the steps below to execute a client function inside a Node.js callback:</p>\n<ol>\n<li>Bind the function to the test controller with the <a class=\"xref\" href=\"/documentation/402789/reference/test-api/clientfunction/constructor\">boundTestRun</a> option.</li>\n<li>To make sure that TestCafe doesn’t end the test before the callback function triggers, suspend the test with a Promise and wait for its resolution.</li>\n</ol>\n<div class=\"IMPORTANT\"><p class=\"alert-title\">Important</p><p>The <code>boundTestRun</code> option has to share a single test controller instance with the test itself. It doesn’t work with <a class=\"xref\" href=\"/documentation/402665/reference/test-api/testcontroller#implicit-test-controller-use\">imported test controllers</a>.</p>\n</div>\n<pre><code class=\"lang-js\">import fs from &#39;fs&#39;;\nimport { ClientFunction } from &#39;testcafe&#39;;\n\nfixture (&#39;My fixture&#39;)\n    .page(&#39;http://www.example.com/&#39;);\n\nconst getDataFromClient = ClientFunction(() =&gt; getSomeData());\n\ntest(&#39;Check client data&#39;, async t =&gt; {\n    const boundGetDataFromClient = getDataFromClient.with({ boundTestRun: t });\n\n    const equal = await new Promise(resolve =&gt; {\n        fs.readFile(&#39;/home/user/tests/reference/clientData.json&#39;, (err, data) =&gt; {\n            boundGetDataFromClient().then(clientData =&gt; {\n                resolve(JSON.stringify(clientData) === data);\n            });\n        });\n    });\n\n    await t.expect(equal).ok();\n});\n</code></pre><h2 id=\"limitations__$\"><a class=\"anchor-fix\" href=\"#limitations\" id=\"limitations\"></a>Limitations<a class=\"anchor-hash\" href=\"#limitations\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>Client functions are subject to the following limitations:</p>\n<ul>\n<li>Client functions do not support generators and the <code>async/await</code> syntax.</li>\n<li>Client functions cannot access outer scope variables. Use <a href=\"#specify-parameters\">parameters</a> or <a href=\"#specify-options-and-dependencies\">dependencies</a> to pass data to client functions.</li>\n<li>Client functions do not support iterable destructuring operators (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\" target=\"_blank\"><code>spread</code><span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Rest_parameters\" target=\"_blank\"><code>rest</code><span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>, etc.) for non-array objects (<code>NodeList</code>, <code>HTMLCollection</code>, etc.).</li>\n<li>Client functions do not support the <a href=\"http://es6-features.org/#PropertyShorthand\" target=\"_blank\">property shorthand syntax<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> for the <code>dependencies</code> option and other imported values.</li>\n<li>Client functions do not support the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" target=\"_blank\"><code>Array.from()</code><span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> and the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\" target=\"_blank\"><code>Array.of()</code><span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> methods.</li>\n<li>Client functions cannot contain keyed collections (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" target=\"_blank\"><code>Map</code><span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\" target=\"_blank\"><code>Set</code><span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\" target=\"_blank\"><code>WeakMap</code><span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\" target=\"_blank\"><code>WeakSet</code><span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>).</li>\n</ul>\n<h2 id=\"examples__$\"><a class=\"anchor-fix\" href=\"#examples\" id=\"examples\"></a>Examples<a class=\"anchor-hash\" href=\"#examples\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<ul>\n<li><a href=\"#retrieve-page-url\">Retrieve Page URL</a></li>\n<li><a href=\"#execute-complex-dom-queries\">Execute complex DOM queries</a></li>\n<li><a href=\"#determine-text-direction\">Determine text direction</a></li>\n<li><a href=\"#select-page-text\">Select page text</a></li>\n<li><a href=\"#access-clipboard\">Access clipboard</a></li>\n<li><a href=\"#observe-page-events\">Observe page events</a></li>\n<li><a href=\"#obtain-the-value-of-an-option-element\">Obtain the value of an option element</a></li>\n</ul>\n<h3 id=\"retrieve-page-url__$\"><a class=\"anchor-fix\" href=\"#retrieve-page-url\" id=\"retrieve-page-url\"></a>Retrieve Page URL<a class=\"anchor-hash\" href=\"#retrieve-page-url\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\n<p>Page actions may redirect the user to an unexpected URL. Create a client function to retrieve the current URL.</p>\n<p>Use an <a class=\"xref\" href=\"/documentation/402837/guides/basic-guides/assertions\">assertion</a> to compare the value of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Location/href\" target=\"_blank\">window.location.href<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> property to your expectations:</p>\n<pre><code class=\"lang-js\">import { ClientFunction } from &#39;testcafe&#39;;\n\nfixture (&#39;My Fixture&#39;)\n    .page (&#39;http://devexpress.github.io/testcafe/example&#39;);\n\n// Returns the URL of the current web page\nconst getPageUrl = ClientFunction(() =&gt; window.location.href);\n\ntest(&#39;Check the page URL&#39;, async t =&gt; {\n    await t\n        .typeText(&#39;#developer-name&#39;, &#39;John Smith&#39;)\n        .click(&#39;#submit-button&#39;) // Redirects to the &#39;Thank you&#39; page\n        .expect(getPageUrl()).contains(&#39;thank-you&#39;); // Checks if the current page URL contains the &#39;thank-you&#39; string\n});\n</code></pre><h3 id=\"execute-complex-dom-queries__$\"><a class=\"anchor-fix\" href=\"#execute-complex-dom-queries\" id=\"execute-complex-dom-queries\"></a>Execute complex DOM queries<a class=\"anchor-hash\" href=\"#execute-complex-dom-queries\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\n<div class=\"IMPORTANT\"><p class=\"alert-title\">Important</p><p>To traverse the DOM, use <a class=\"xref\" href=\"/documentation/402829/guides/basic-guides/element-selectors\">Selector queries</a> instead of native <code>querySelector</code> and <code>querySelectorAll</code> methods. You can pass Selector queries as client function <a class=\"xref\" href=\"/documentation/402789/reference/test-api/clientfunction/constructor#optionsdependencies\">dependencies</a>. Chain <a class=\"xref\" href=\"/documentation/402829/guides/basic-guides/element-selectors#selector-methods\">selector methods</a> for simpler query syntax.</p>\n</div>\n<p>Client functions can perform complex client-side calculations.</p>\n<p>For example, the <a href=\"https://js.devexpress.com/\" target=\"_blank\">https://js.devexpress.com/<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> page contains a table. The example below extracts data from <strong>only two</strong> of the table’s columns and pushes it to an array:</p>\n<pre><code class=\"lang-js\">import { ClientFunction } from &#39;testcafe&#39;;\n\nfixture(&#39;Get sale amount&#39;)\n    .page(&#39;https://js.devexpress.com/&#39;);\n\n    const getSalesAmount = ClientFunction(() =&gt; {\n        const grid      = document.querySelector(&#39;.dx-datagrid-rowsview&#39;);\n        const rowCount  = grid.querySelectorAll(&#39;.dx-data-row&#39;).length;\n        const sales     = grid.querySelectorAll(&#39;td:nth-child(3)&#39;);\n        const customers = grid.querySelectorAll(&#39;td:nth-child(7)&#39;);\n\n        const array = [];\n\n        for (let i = 0; i &lt; rowCount; i++) {\n            const salesPerCustomer = {\n                sales: sales[i].textContent,\n                customer: customers[i].textContent\n            }\n\n            array.push(salesPerCustomer);\n        }\n\n        return array;\n    });\n\nconst expectedData = [\n            { sales: &#39;$6,370&#39;, customer: &#39;Renewable Supplies&#39; },\n            { sales: &#39;$4,530&#39;, customer: &#39;Apollo Inc&#39; },\n            { sales: &#39;$1,110&#39;, customer: &#39;Johnson &amp; Assoc&#39; },\n            { sales: &#39;$6,600&#39;, customer: &#39;Global Services&#39; },\n            { sales: &#39;$2,830&#39;, customer: &#39;Health Plus Inc&#39; },\n            { sales: &#39;$6,770&#39;, customer: &#39;Gemini Stores&#39; },\n            { sales: &#39;$1,460&#39;, customer: &#39;Discovery Systems&#39; }\n        ];\n\ntest(&#39;My test&#39;, async t =&gt; {\n    await t\n        .expect(getSalesAmount()).eql(expectedData);\n});\n</code></pre><h3 id=\"determine-text-direction__$\"><a class=\"anchor-fix\" href=\"#determine-text-direction\" id=\"determine-text-direction\"></a>Determine text direction<a class=\"anchor-hash\" href=\"#determine-text-direction\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\n<p>The <code>getDocumentDirection</code> client function determines the predominant text direction of the page:</p>\n<pre><code class=\"lang-js\">import { ClientFunction } from &#39;testcafe&#39;;\n\nconst getDocumentDirection = ClientFunction(() =&gt; {\n  return getComputedStyle(document.documentElement).direction;\n})\n\nfixture(&#39;Client Functions&#39;)\n  .page(&#39;https://devexpress.github.io/testcafe/example&#39;);\n\ntest(&#39;Determine test direction&#39;, async t =&gt; {\n\n  await t\n    .expect(getDocumentDirection()).eql(&#39;ltr&#39;);\n});\n</code></pre><h3 id=\"select-page-text__$\"><a class=\"anchor-fix\" href=\"#select-page-text\" id=\"select-page-text\"></a>Select page text<a class=\"anchor-hash\" href=\"#select-page-text\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\n<p>The <a class=\"xref\" href=\"/documentation/402687/reference/test-api/testcontroller/selecttext\">selectText</a> test action can select text from user-editable elements, such as <code>input</code>, <code>textarea</code>, and <code>contenteditable</code>. To select regular page text, create a client function that uses the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Selection\" target=\"_blank\">JavaScript Selection API<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>.</p>\n<pre><code class=\"lang-js\">import { Selector, ClientFunction } from &#39;testcafe&#39;;\n\nfixture(&#39;selection&#39;)\n    .page(&#39;http://example.com&#39;);\n\nconst selectElement = (selector) =&gt; ClientFunction(() =&gt; {\n    const selection = document.getSelection();\n    const range = document.createRange();\n\n    range.selectNode(selector());\n    selection.addRange(range);\n}, { dependencies: { selector } });\n\ntest(&#39;selection&#39;, async t =&gt; {\n    await selectElement(Selector(&#39;h1&#39;))();\n\n    await t.debug();\n});\n</code></pre><h3 id=\"access-clipboard__$\"><a class=\"anchor-fix\" href=\"#access-clipboard\" id=\"access-clipboard\"></a>Access clipboard<a class=\"anchor-hash\" href=\"#access-clipboard\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\n<p>Clipboard manipulation requires a high level of system access. The majority of browsers <a href=\"https://caniuse.com/clipboard\" target=\"_blank\">do not support<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> the HTML5 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API\" target=\"_blank\">Clipboard API<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>. Due to these factors, TestCafe doesn’t offer any clipboard management tools out of the box.</p>\n<p>You can work around this limitation with a client function. Create event listeners that intercept “copy” and “paste” keyboard shortcuts:</p>\n<pre><code class=\"lang-js\">import { Selector, ClientFunction } from &#39;testcafe&#39;;\nfixture (&#39;Example&#39;)\n    .page(&#39;http://devexpress.github.io/testcafe/example/&#39;);\n\ntest(&#39;Clipboard test&#39;, async t =&gt; {\n    const text = &#39;Value for copy-paste&#39;;\n\n    const emulateClipboard = ClientFunction(() =&gt; {\n        let buffer = &#39;&#39;;\n\n        document.addEventListener(&#39;keypress&#39;, event =&gt; {\n            if (event.ctrlKey) {\n                if (event.key === &#39;c&#39;)\n                    buffer = document.getSelection().toString();\n\n                if (event.key === &#39;v&#39;)\n                    document.activeElement.value = buffer;\n            }\n        });\n    });\n\n    await emulateClipboard();\n    await t\n        .typeText(&#39;#developer-name&#39;, text)\n        .selectText(&#39;#developer-name&#39;)\n        .pressKey(&#39;ctrl+c&#39;)\n        .click(&#39;#tried-test-cafe&#39;)\n        .click(&#39;#comments&#39;)\n        .pressKey(&#39;ctrl+v&#39;)\n        .expect(Selector(&#39;#comments&#39;).value).eql(text)\n});\n</code></pre><h3 id=\"observe-page-events__$\"><a class=\"anchor-fix\" href=\"#observe-page-events\" id=\"observe-page-events\"></a>Observe page events<a class=\"anchor-hash\" href=\"#observe-page-events\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\n<p>TestCafe can <a class=\"xref\" href=\"/documentation/403091/reference/test-api/testcontroller/dispatchevent\">fire custom DOM events</a>, but doesn’t have the capability to observe page events as they happen.</p>\n<p>To work around this limitation, create three client functions:</p>\n<ul>\n<li>A Client Function that modifies the <code>window</code> object to capture page events.</li>\n<li>A Client Function that retrieves the event log.</li>\n<li>A Client Function that shuts down event capture.</li>\n</ul>\n<p>You can then use these functions in your test whenever you retrieve event data.</p>\n<pre><code class=\"lang-js\">import { ClientFunction } from &#39;testcafe&#39;;\n\nfixture(&#39;Sample App&#39;)\n    .page(&#39;https://cf51n.csb.app/&#39;);\n\n// Create a function that intercepts window events\nconst spyOn = ClientFunction(() =&gt; {\n\n    window.myFunctionSpyData = []; // Array for event data\n    window.orirginalFunction = window.myObject.myFunction; // Preserve the original state of the window object\n\n    // Modify the window object to collect event data\n    window.myObject.myFunction = function () {\n        window.myFunctionSpyData.push(...arguments); // Adds event to the array\n        window.orirginalFunction(...arguments);\n    };\n});\n\n// Create a function to retrieve event data\nconst getSpyData = ClientFunction(() =&gt; {\n    return window.myFunctionSpyData;\n});\n\n// Create a function to reset the window object\nconst spyOff = ClientFunction(() =&gt; {\n    window.myObject.myFunction = window.orirginalFunction; // Restore the original window object\n    delete window.spyData;\n});\n\ntest(&#39;Observe page events&#39;, async t =&gt; {\n    await spyOn();\n\n    await t.click(&#39;#btn&#39;);\n\n    const data = await getSpyData();\n\n    await spyOff();\n\n    await t\n        .expect(data.length).eql(2)\n        .expect(data[0]).eql(&#39;1&#39;)\n        .expect(data[1]).eql(&#39;2&#39;);\n});\n</code></pre><h3 id=\"obtain-the-value-of-an-option-element__$\"><a class=\"anchor-fix\" href=\"#obtain-the-value-of-an-option-element\" id=\"obtain-the-value-of-an-option-element\"></a>Obtain the value of an “option” element<a class=\"anchor-hash\" href=\"#obtain-the-value-of-an-option-element\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\n<p>If the <code>value</code> property of an option element differs from the element’s text content, a regluar Selector query cannot extract it. Create a Selector function that retrieves this value instead:</p>\n<pre><code class=\"lang-js\">import { Selector, ClientFunction } from &#39;testcafe&#39;;\n\nfixture(&#39;Fixture 1&#39;)\n    .page(&#39;https://kys0l.csb.app/&#39;);\n\ntest(&#39;Test 1&#39;, async t =&gt; {\n    const selector = Selector(&#39;select&#39;);\n\n    const getValue = ClientFunction((index) =&gt; {\n        const select = selector();\n\n        return select.options[index].value;\n    }, { dependencies: { selector } });\n\n    await t\n        .expect(getValue(0)).eql(&#39;1234&#39;)\n        .expect(getValue(1)).eql(&#39;5432&#39;)\n        .expect(getValue(2)).eql(&#39;9999&#39;);\n});\n</code></pre>","headers":[{"title":"Article Summary","tagName":"h2","id":"article-summary","lvl":2},{"title":"Table of Contents","tagName":"h2","id":"table-of-contents","lvl":2},{"title":"Common Use Cases","tagName":"h2","id":"common-use-cases","lvl":2},{"title":"Create a Client Function","tagName":"h2","id":"create-a-client-function","lvl":2},{"title":"Execute Client Functions","tagName":"h2","id":"execute-client-functions","lvl":2},{"title":"Limitations","tagName":"h2","id":"limitations","lvl":2},{"title":"Examples","tagName":"h2","id":"examples","lvl":2}],"title":"Client Functions","schema":null,"author":null,"preview":null,"description":null,"published":null},"topicUid":"402832","headerNav":{"items":[{"name":"TestCafe Studio","id":"TestCafe Studio"},{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started","items":[]},{"name":"API","id":"402632","url":"/documentation/402632/api","items":[]},{"name":"Recipes","id":"402633","url":"/documentation/402633/recipes","items":[]},{"name":"Examples","id":"402637","url":"/documentation/402637/examples"},{"name":"FAQ","id":"403936","url":"/documentation/403936/faq","headerUrl":"/documentation/402636/faq/general-info","items":[]},{"name":"What's New","id":"What's New","url":"/release-notes","href":"/release-notes","items":[]},{"name":"Dashboard Alpha","id":"Dashboard Alpha","items":[]},{"name":"Support","id":"Support","url":"/support","href":"/support"}],"activeItems":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Basic Guides","id":"402634/Basic Guides"},{"name":"Client Functions","id":"402832","url":"/documentation/402832/guides/basic-guides/client-functions"}]},"sidebarNav":{"root":{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},"items":[{"name":"Overview","id":"402634/Overview","items":[{"name":"Getting Started","id":"402635","url":"/documentation/402635/guides/overview/getting-started"},{"name":"Why TestCafe?","id":"402631","url":"/documentation/402631/guides/overview/why-testcafe"}]},{"name":"Basic Guides","id":"402634/Basic Guides","items":[{"name":"Install TestCafe","id":"402834","url":"/documentation/402834/guides/basic-guides/install-testcafe"},{"name":"Test Structure","id":"402831","url":"/documentation/402831/guides/basic-guides/test-structure"},{"name":"Element Selectors","id":"402829","url":"/documentation/402829/guides/basic-guides/element-selectors"},{"name":"Test Actions","id":"402833","url":"/documentation/402833/guides/basic-guides/test-actions"},{"name":"Assertions","id":"402837","url":"/documentation/402837/guides/basic-guides/assertions"},{"name":"Client Functions","id":"402832","url":"/documentation/402832/guides/basic-guides/client-functions"},{"name":"Run Tests","id":"402830","url":"/documentation/402830/guides/basic-guides/run-tests"},{"name":"Debug Tests","id":"402835","url":"/documentation/402835/guides/basic-guides/debug-tests"}]},{"name":"Best Practices","id":"402634/Best Practices","items":[{"name":"Best Practices","id":"402836","url":"/documentation/402836/guides/best-practices/best-practices"},{"name":"Speed Up Test Execution","id":"402963","url":"/documentation/402963/guides/best-practices/speed-up-test-execution"},{"name":"Page Model","id":"402826","url":"/documentation/402826/guides/best-practices/page-model"},{"name":"Bootstrap your TestCafe project with create-testcafe","id":"404259","url":"/documentation/404259/guides/best-practices/create-testcafe"}]},{"name":"Intermediate Guides","id":"402634/Intermediate Guides","items":[{"name":"Native Automation FAQ","id":"404237","url":"/documentation/404237/guides/intermediate-guides/native-automation-mode"},{"name":"Browsers","id":"402828","url":"/documentation/402828/guides/intermediate-guides/browsers"},{"name":"Mobile Devices, Cloud Browsers and Emulation","id":"403584","url":"/documentation/403584/guides/intermediate-guides/mobile-devices-cloud-browsers-and-emulation"},{"name":"Visual Selector Debugger","id":"404288","url":"/documentation/404288/guides/intermediate-guides/visual-selector-debugger"},{"name":"Run Tests Concurrently","id":"403626","url":"/documentation/403626/guides/intermediate-guides/run-tests-concurrently"},{"name":"Reporters","id":"402825","url":"/documentation/402825/guides/intermediate-guides/reporters"},{"name":"TypeScript and CoffeeScript","id":"402824","url":"/documentation/402824/guides/intermediate-guides/typescript-and-coffeescript"},{"name":"Authentication and Roles","id":"402845","url":"/documentation/402845/guides/intermediate-guides/authentication"},{"name":"Screenshots and Videos","id":"402840","url":"/documentation/402840/guides/intermediate-guides/screenshots-and-videos"},{"name":"API Testing","id":"403971","url":"/documentation/403971/guides/intermediate-guides/api-testing"},{"name":"Hooks","id":"403435","url":"/documentation/403435/guides/intermediate-guides/hooks"},{"name":"Quarantine Mode","id":"403841","url":"/documentation/403841/guides/intermediate-guides/quarantine-mode"},{"name":"Live Mode","id":"403842","url":"/documentation/403842/guides/intermediate-guides/live-mode"},{"name":"Intercept HTTP Requests","id":"402842","url":"/documentation/402842/guides/intermediate-guides/intercept-http-requests"},{"name":"Metadata and Filtering","id":"403436","url":"/documentation/403436/guides/intermediate-guides/metadata-and-filtering"},{"name":"Multiple Browser Windows","id":"402841","url":"/documentation/402841/guides/intermediate-guides/multiple-browser-windows"}]},{"name":"Advanced Guides","id":"402634/Advanced Guides","items":[{"name":"Advanced Selector Techniques","id":"403655","url":"/documentation/403655/guides/advanced-guides/advanced-selector-techniques"},{"name":"Inject Client Scripts","id":"402843","url":"/documentation/402843/guides/advanced-guides/inject-client-scripts"},{"name":"ESM Module Support","id":"404258","url":"/documentation/404258/guides/advanced-guides/esm-module-support"},{"name":"Create Custom Test Actions","id":"404150","url":"/documentation/404150/guides/advanced-guides/custom-test-actions"},{"name":"Fire DOM Events","id":"403219","url":"/documentation/403219/guides/advanced-guides/fire-dom-events"},{"name":"Execute Shell Commands on Startup","id":"403849","url":"/documentation/403849/guides/advanced-guides/execute-shell-commands-on-startup"},{"name":"Test HTTPS Features and HTTP/2 Websites","id":"402839","url":"/documentation/402839/guides/advanced-guides/test-https-features-and-http2-websites"},{"name":"Modify Reporter Output","id":"404388","url":"/documentation/404388/guides/advanced-guides/modify-reporter-output"},{"name":"Detect the Client Browser and Platform","id":"402844","url":"/documentation/402844/guides/advanced-guides/detect-the-client-browser-and-platform"},{"name":"Use the TestCafe Docker Image","id":"402838","url":"/documentation/402838/guides/advanced-guides/use-testcafe-docker-image"},{"name":"Built-In Wait Mechanisms","id":"402827","url":"/documentation/402827/guides/advanced-guides/built-in-wait-mechanisms"},{"name":"Replay Chrome User Flow Recordings","id":"403998","url":"/documentation/403998/guides/advanced-guides/chrome-replay-support"}]},{"name":"Continuous Integration","id":"402809","url":"/documentation/402809/guides/continuous-integration","items":[{"name":"Integrate TestCafe with AppVeyor","id":"402823","url":"/documentation/402823/guides/continuous-integration/appveyor"},{"name":"Integrate TestCafe with Azure DevOps","id":"402822","url":"/documentation/402822/guides/continuous-integration/azure-devops"},{"name":"Run Tests in Bitbucket Pipelines","id":"402821","url":"/documentation/402821/guides/continuous-integration/bitbucket-pipelines"},{"name":"Integrate TestCafe With CircleCI","id":"402819","url":"/documentation/402819/guides/continuous-integration/circleci"},{"name":"Run Tests on LambdaTest with CircleCI","id":"402820","url":"/documentation/402820/guides/continuous-integration/circleci-and-lambdatest"},{"name":"Integrate TestCafe with GitHub Actions","id":"402817","url":"/documentation/402817/guides/continuous-integration/github-actions"},{"name":"Run Tests on BrowserStack with GitHub Actions","id":"402818","url":"/documentation/402818/guides/continuous-integration/github-actions-and-browserstack"},{"name":"Integrate TestCafe with GitLab","id":"402816","url":"/documentation/402816/guides/continuous-integration/gitlab"},{"name":"Integrate TestCafe with Jenkins","id":"402815","url":"/documentation/402815/guides/continuous-integration/jenkins"},{"name":"Integrate TestCafe with TeamCity","id":"402847","url":"/documentation/402847/guides/continuous-integration/teamcity"},{"name":"Run Tests in Travis CI","id":"402813","url":"/documentation/402813/guides/continuous-integration/travis"},{"name":"Run Tests on Sauce Labs with Travis CI","id":"402814","url":"/documentation/402814/guides/continuous-integration/travis-and-sauce-labs"}]},{"name":"Extend TestCafe","id":"402634/Extend TestCafe","items":[{"name":"Install Plugins","id":"402811","url":"/documentation/402811/guides/extend-testcafe/install-plugins"},{"name":"Reporter Plugin","id":"402810","url":"/documentation/402810/guides/extend-testcafe/reporter-plugin"},{"name":"Browser Provider Plugin","id":"402812","url":"/documentation/402812/guides/extend-testcafe/browser-provider-plugin"}]}],"activeItems":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Basic Guides","id":"402634/Basic Guides"},{"name":"Client Functions","id":"402832","url":"/documentation/402832/guides/basic-guides/client-functions"}],"showLeafs":true},"breadcrumbsNav":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Basic Guides","id":"402634/Basic Guides"},{"name":"Client Functions","id":"402832","url":"/documentation/402832/guides/basic-guides/client-functions"}],"publishDates":{"teamBlog":[1687291200000,1667260800000,1661889600000,1657569600000,1637107200000,1633550400000,1632254400000,1626206400000,1612814400000,1609113600000,1607644800000,1605657600000,1605571200000,1600905600000,1599076800000,1598385600000,1597953600000,1597780800000,1595966400000,1594670400000,1593460800000,1590350400000,1587326400000],"releaseNotes}},"__N_SSG":true}