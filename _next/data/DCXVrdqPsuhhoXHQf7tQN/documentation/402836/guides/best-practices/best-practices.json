{"pageProps":{"content":{"html":"        <h1>Best Practices</h1>\n\n<p>This article describes best TestCafe strategies and common user mistakes. It covers the following subjects:</p>\n<ul>\n<li><a href=\"#test-scope\">Test Scope</a></li>\n<li><a href=\"#common-assertion-mistakes\">Common Assetion Mistakes</a><ul>\n<li><a href=\"#selector-example\">Selector Example</a></li>\n<li><a href=\"#client-function-example\">Client Function Example</a></li>\n</ul>\n</li>\n<li><a href=\"#page-models\">Page Models</a></li>\n<li><a href=\"#use-roles-to-authenticate-users\">Use Roles to Authenticate users</a></li>\n<li><a href=\"#file-structure\">File Structure</a></li>\n<li><a href=\"#setup-and-teardown\">Setup and Teardown</a></li>\n<li><a href=\"#selector-strategy\">Selector Strategy</a></li>\n</ul>\n<h2 id=\"test-scope__$\"><a class=\"anchor-fix\" href=\"#test-scope\" id=\"test-scope\"></a>Test Scope<a class=\"anchor-hash\" href=\"#test-scope\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>To make the most out of TestCafe, use the framework for its intended purpose — end-to-end testing.</p>\n<ul>\n<li>End-to-end tests are different from unit or integration tests. Like the name suggests, they test your application as a whole.</li>\n<li>Do not use TestCafe to test individual components of your software. Instead, write tests that simulate common user scenarios. </li>\n<li>Do not test exceptions and edge cases - that is what unit and integration tests are for. Test the general business logic of your application.</li>\n<li>Write fewer E2E tests. End-to-end tests are slow by nature, so the number of tests should be drastically lower than that of unit or integration tests.</li>\n</ul>\n<h2 id=\"common-assertion-mistakes__$\"><a class=\"anchor-fix\" href=\"#common-assertion-mistakes\" id=\"common-assertion-mistakes\"></a>Common Assertion Mistakes<a class=\"anchor-hash\" href=\"#common-assertion-mistakes\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>The purpose of assertions is to compare the <strong>actual</strong> state of your application to your <strong>expectations</strong>. If you compare two <strong>static values</strong>, you incur the risk of test failure. To avoid this outcome, do not use the <strong>await keyword</strong> when you define assertion variables.</p>\n<h3 id=\"selector-example__$\"><a class=\"anchor-fix\" href=\"#selector-example\" id=\"selector-example\"></a>Selector Example<a class=\"anchor-hash\" href=\"#selector-example\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\n<p>Do not <code>await</code> a Selector statement when you want to <em>copy</em> it and pass it to an assertion. If you preface a Selector query with the <code>await</code> keyword, TestCafe immediately executes the query. Your new variable will contain the Selector’s return value, instead of the Selector query itself.</p>\n<p>In the following example, the <code>developerName</code> variable contains the return value of a Selector query. The assertion fails because the DOM changed after the variable declaration:</p>\n<pre><code class=\"lang-js\">import { Selector } from &#39;testcafe&#39;;\n\nfixture `My fixture`\n    .page `http://devexpress.github.io/testcafe/example/`;\n\ntest(&#39;Assertion with Selector&#39;, async t =&gt; {\n    const developerNameInput = Selector(&#39;#developer-name&#39;);\n\n    // Populate the developer name field\n    await t.typeText(developerNameInput, &#39;Peter&#39;);\n\n    // The await keyword precedes the Selector declaration.\n    // TestCafe executes the Selector immediately, and passes its return value (&quot;Peter&quot;) to the variable.\n    const developerName = await Selector(&#39;#developer-name&#39;).value;\n\n    await t\n            .expect(developerName).eql(&#39;Peter&#39;)\n            .typeText(developerNameInput, &#39;Jack&#39;) // Update the content of the field\n            .expect(developerName).eql(&#39;Jack&#39;); // The &quot;developerName&quot; variable contains outdated data. The assertion fails.\n});\n</code></pre><p>Without the <code>await</code> keyword, the <code>developerName</code> variable becomes a copy of the Selector query. The assertion at the end of the test executes the query, and does not fail.</p>\n<pre><code class=\"lang-js\">import { Selector } from &#39;testcafe&#39;;\n\nfixture `My fixture`\n    .page `http://devexpress.github.io/testcafe/example/`;\n\ntest(&#39;Assertion with Selector&#39;, async t =&gt; {\n    const developerNameInput = Selector(&#39;#developer-name&#39;);\n\n    // Populate the developer name field\n    await t.typeText(developerNameInput, &#39;Peter&#39;);\n\n    // The await keyword does not precede the Selector declaration.\n    // TestCafe passes the Selector query itself, and not its return value, to the variable.\n    const developerName = Selector(&#39;#developer-name&#39;).value;\n\n    await t\n            .expect(developerName).eql(&#39;Peter&#39;)\n            .typeText(developerNameInput, &#39;Jack&#39;) // Update the content of the field\n            .expect(developerName).eql(&#39;Jack&#39;); // TestCafe executes the Selector query from the developerName variable. The asserion succeeds.\n});\n</code></pre><h3 id=\"client-function-example__$\"><a class=\"anchor-fix\" href=\"#client-function-example\" id=\"client-function-example\"></a>Client Function Example<a class=\"anchor-hash\" href=\"#client-function-example\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\n<p>This rule also applies to <a class=\"xref\" href=\"/documentation/402832/guides/basic-guides/client-functions\">Client Functions</a>.</p>\n<p>Do not <code>await</code> a Client Function when you want to <em>copy</em> it and pass it to an assertion. If you preface a Client Function with the <code>await</code> keyword, TestCafe immediately executes the function. Your new variable will contain the Client Function’s return value, instead of the Client Function query itself.</p>\n<p>In the following example, the <code>interfaceValue</code> variable contains the return value of the <code>getInterface</code> query. The assertion fails because the DOM changed after the variable declaration:</p>\n<pre><code class=\"lang-js\">import { Selector, ClientFunction } from &#39;testcafe&#39;;\n\nfixture `My fixture`\n    .page `http://devexpress.github.io/testcafe/example/`;\n\ntest(&#39;Assertion with ClientFunction&#39;, async t =&gt; {\n    const interfaceSelect = Selector(&#39;#preferred-interface&#39;);\n    const interfaceOption = interfaceSelect.find(&#39;option&#39;);\n\n    const getInterface        = ClientFunction(() =&gt; document.getElementById(&#39;preferred-interface&#39;).value);\n\n    // The await keyword precedes the call of the client function.\n    // TestCafe executes the Client Function and passes its return value to the variable.\n    const interfaceValue           = await getInterface(); \n\n    await t\n        .click(interfaceSelect)\n        .click(interfaceOption.withText(&#39;JavaScript API&#39;)) // Change the value of the field.\n        .expect(interfaceValue).eql(&#39;JavaScript API&#39;); // The &quot;value&quot; variable contains outdated data. The assertion fails.\n});\n</code></pre><p>Without the <code>await</code> keyword, the <code>interfaceValue</code> variable becomes a copy of the client function. The assertion at the end of the test executes this function, and does not fail.</p>\n<pre><code class=\"lang-js\">import { Selector, ClientFunction } from &#39;testcafe&#39;;\n\nfixture `My fixture`\n    .page `http://devexpress.github.io/testcafe/example/`;\n\ntest(&#39;Assertion with ClientFunction&#39;, async t =&gt; {\n    const getValue = ClientFunction(() =&gt; document.getElementById(&#39;preferred-interface&#39;).value)\n\n    const interfaceSelect = Selector(&#39;#preferred-interface&#39;);\n    const interfaceOption = interfaceSelect.find(&#39;option&#39;);\n    const value           =  getValue();\n\n    await t\n        .click(interfaceSelect)\n        .click(interfaceOption.withText(&#39;JavaScript API&#39;))\n        .expect(value).eql(&#39;JavaScript API&#39;)\n});\n</code></pre><h2 id=\"page-models__$\"><a class=\"anchor-fix\" href=\"#page-models\" id=\"page-models\"></a>Page Models<a class=\"anchor-hash\" href=\"#page-models\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>Incorporate <a class=\"xref\" href=\"/documentation/402826/guides/best-practices/page-model\">Page Models</a> into your test suite. Page model objects store Selector queries for important page elements, and define custom methods for frequent action combinations.</p>\n<p>The following page model code snippet describes the <a href=\"https://devexpress.github.io/testcafe/example/\" target=\"_blank\">TestCafe Example Page<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>:</p>\n<pre><code class=\"lang-js\">import {t, Selector } from &#39;testcafe&#39;;\n\nclass Page {\n    constructor () {\n        this.nameInput               = Selector(&#39;input&#39;).withAttribute(&#39;data-testid&#39;, &#39;name-input&#39;);\n        this.importantFeaturesLabels = Selector(&#39;legend&#39;).withExactText(&#39;Which features are important to you:&#39;).parent().child(&#39;p&#39;).child(&#39;label&#39;);\n        this.submitButton            = Selector(&#39;button&#39;).withAttribute(&#39;data-testid&#39;, &#39;submit-button&#39;);\n    }\n\n    async selectFeature(number) {\n        await t.click(this.importantFeaturesLabels.nth(number));\n    }\n\n    async clickSubmit() {\n        await t.click(this.submitButton);\n    }\n\n    async typeName(name) {\n        await t.typeText(this.nameInput, name);\n    }\n}\n\nexport default new Page();\n</code></pre><p>This useful abstraction improves the flexibility of your tests. If you change your application’s layout, you only need to update a single file. A test that uses this model can look like this:</p>\n<pre><code class=\"lang-js\">import page from &#39;./page-model&#39;\n\nfixture `Use a Page Model`\n    .page `https://devexpress.github.io/testcafe/example`;\n\n\ntest(&#39;Use a Page Model&#39;, async () =&gt; {\n\n    await page.selectFeature(2);\n    await page.typeName(&#39;Peter&#39;);\n    await page.clickSubmit();\n\n});\n</code></pre><p>For more information, read the <a class=\"xref\" href=\"/documentation/402826/guides/best-practices/page-model\">Page Model</a> guide and view the <a href=\"https://github.com/DevExpress/testcafe-examples/tree/master/examples/use-page-model\" target=\"_blank\">page model<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> example on GitHub.</p>\n<h2 id=\"use-roles-to-authenticate-users__$\"><a class=\"anchor-fix\" href=\"#use-roles-to-authenticate-users\" id=\"use-roles-to-authenticate-users\"></a>Use Roles to Authenticate Users<a class=\"anchor-hash\" href=\"#use-roles-to-authenticate-users\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>Save authentication routines as <a class=\"xref\" href=\"/documentation/402845/guides/intermediate-guides/authentication\">Roles</a> to simplify the log-in process, and switch between user accounts with a single line of code. </p>\n<p>Store <a class=\"xref\" href=\"/documentation/402760/reference/test-api/role/constructor\">Role definitions</a> in a separate file and activate them with the <a class=\"xref\" href=\"/documentation/402673/reference/test-api/testcontroller/userole\">t.useRole</a> method.</p>\n<p><code>/tests/roles/roles.js:</code></p>\n<pre><code class=\"lang-js\">import { Role } from &#39;testcafe&#39;;\n\nconst regularUser = Role(&#39;http://example.com/login&#39;, async t =&gt; {\n    await t\n        .typeText(&#39;#login&#39;, &#39;TestUser&#39;)\n        .typeText(&#39;#password&#39;, &#39;testpass&#39;)\n        .click(&#39;#sign-in&#39;);\n});\n\nconst admin = Role(&#39;http://example.com/login&#39;, async t =&gt; {\n    await t\n        .typeText(&#39;#login&#39;, &#39;Admin&#39;)\n        .typeText(&#39;#password&#39;, &#39;adminpass&#39;)\n        .click(&#39;#sign-in&#39;);\n});\n\nexport { regularUser, admin };\n</code></pre><p><code>/tests/test_group1.js/test1.js:</code></p>\n<pre><code class=\"lang-js\">import { regularUser, admin } from &#39;../../roles/roles.js&#39;;\n\nfixture `My Fixture`\n    .page(&#39;../../my-page.html&#39;);\n\ntest(&#39;Regular user test&#39;, async t =&gt; {\n    await t\n        .useRole(regularUser);\n});\n\ntest(&#39;Admin test&#39;, async t =&gt; {\n    await t\n        .useRole(admin);\n});\n</code></pre><p>Read the <a class=\"xref\" href=\"/documentation/402845/guides/intermediate-guides/authentication\">authentication guide</a> to learn more about Roles.</p>\n<h2 id=\"file-structure__$\"><a class=\"anchor-fix\" href=\"#file-structure\" id=\"file-structure\"></a>File Structure<a class=\"anchor-hash\" href=\"#file-structure\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>Follow these guidelines to optimize the structure of your test suite:</p>\n<ul>\n<li>Use a <a href=\"#page-models\">page model</a> to store frequently used Selectors and action combinations.</li>\n<li>Store all the page model files in a single, separate directory. If your application consists of multiple components or subsystems, split up the associated page model objects into separate files.</li>\n<li>Store <a href=\"#use-roles-to-authenticate-users\">Role definitions</a> in a separate file to re-use them across tests.</li>\n<li>Create a <a class=\"xref\" href=\"/documentation/402638/reference/configuration-file\">Configuration File</a> in the root directory of the project. The configuration file simplifies test setting management.</li>\n<li>Define one <code>fixture</code> per file. Multiple fixtures per test file may cause confusion as you scale.</li>\n<li>Use <code>fixtures</code> to store groups of related tests. For example, place all authentication-related tests into a single fixture.</li>\n<li>TestCafe tests are purely functional. As such, it is best to separate them from application code. Keep your test files in a separate, appropriately named directory (for example, <code>tests</code>).</li>\n<li>Create subfolders for tests that cover different subsystems of your application.</li>\n<li>Don’t write long tests. Shorter test scenarios are easier to debug and run concurrently.</li>\n<li>Store reused data (for example, large sets of reference values or form inputs) in a dedicated, descriptively titled directory (for example, <code>data</code>).</li>\n</ul>\n<p>If you apply all the suggestions above, your project’s file structure might look like this:</p>\n<pre><code class=\"lang-sh\">.\n├── .testcaferc.json\n└── tests\n    ├── |- test_group1/\n    │   └── |-test1.js\n    │       |-test2.js\n    ├── |- test_group2/\n    │   └── |-test1.js\n    │       |-test2.js\n    ├── |- page_model/\n    │   └── |- page1.js\n    │       |- page2.js\n    ├── |- helpers/\n    │   └── |- helper1.js\n    │       |- helper2.js\n    ├── |- roles/\n    │   └── |- roles.js\n    └── |-data\n</code></pre><h2 id=\"setup-and-teardown__$\"><a class=\"anchor-fix\" href=\"#setup-and-teardown\" id=\"setup-and-teardown\"></a>Setup and Teardown<a class=\"anchor-hash\" href=\"#setup-and-teardown\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>State management is an important part of web testing. Web tests produce unnecessary artifacts - database records, local storage records, cache data, and cookies. Create <a class=\"xref\" href=\"/documentation/403435/guides/intermediate-guides/hooks\">hooks</a> to erase these artifacts after the test run.</p>\n<p>If one of your tests <strong>downloads</strong> a file to local storage, you may want to delete this file after the fixture. Save this routine to an <code>afterEach</code> hook:</p>\n<pre><code class=\"lang-js\">fixture `My fixture`\n    .page `http://example.com`\n    .afterEach( async t =&gt; {\n        await cleanDir();\n    });\n\ntest(&#39;My test&#39;, async t =&gt; {\n    //test actions\n});\n</code></pre><p>The <code>after</code> and <code>afterEach</code> hooks are good for cleanup. But do not use these hooks to prepare your file system or database for the next test or fixture. TestCafe proceeds to the next test even when the <code>after</code> / <code>afterEach</code> hook fails. This approach can cause increased test failure rates.</p>\n<p>Use <code>before</code> or <code>beforeEach</code> to prepare your environment for the test/fixture instead. If these hooks fail, the test does not run. This approach saves you time and effort.</p>\n<pre><code class=\"lang-js\">fixture `Another fixture`\n    .page `http://example.com`\n    .beforeEach( async t =&gt; {\n        await setupFileSystem();\n    });\n\ntest(&#39;Another test&#39;, async t =&gt; {\n    //test actions\n});\n</code></pre><h2 id=\"selector-strategy__$\"><a class=\"anchor-fix\" href=\"#selector-strategy\" id=\"selector-strategy\"></a>Selector Strategy<a class=\"anchor-hash\" href=\"#selector-strategy\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\n<p>Follow these guidelines to create reliable Selectors:</p>\n<ul>\n<li>Do not create Selectors with a high level of specificity. Such Selectors can break when you make changes to your application. For example, the following query is unreliable because it references the order of page elements. If this order changes, the Selector breaks: <code>Selector(‘body’).find(‘div’).nth(5).find(‘p’).nth(3)</code>.</li>\n<li>Do not create Selectors that are too generic. These Selectors, too, can break when you change your application. For example, the following query doesn’t reference class names or other unique attribues. If you introduce a new <code>div</code> element, or a new <code>button</code> element, the Selector breaks:  <code>Selector(‘div &gt; button’)</code>.</li>\n<li>Do not create Selectors that reference dynamic attributes. For example, the following query references a CSS property. If you change the style of the element, the Selector breaks: <code>Selector(&#39;[style*=&quot;background-color: red&quot;]&#39;)</code>.</li>\n<li>Create easy-to-read Selector queries. For example, the following query is difficult to understand, and, therefore, hard to maintain: <code>Selector(‘div’).find(‘pre’).nextSibling(-1)</code>. Use class names and filter elements by content instead: <code>Selector(‘#topContainer’).find(‘.child’).withText(‘Add item’)</code>.</li>\n<li>Create <em>meaningful</em> Selectors. It’s a good idea to build selectors that identify elements from the end-user perspective. For instance, <code>Selector(‘form’).find(‘[name=”btn-foo-123”]’)</code> might be stable, but has no semantic meaning.</li>\n<li>Mark important page elements with a custom element attribute (such as <code>data-testid</code>). Then, reference this attribute in your Selector queries. This attribute should persist as you develop your application, making it easier to write reliable TestCafe tests.</li>\n<li>Store common Selector queries in a <a href=\"#page-models\">page model file</a>. Page models increase test stability and help remove redundant code.</li>\n<li>Use <a class=\"xref\" href=\"/documentation/402829/guides/basic-guides/element-selectors#framework-specific-selectors\">plugins</a> to refrence components by name in Angular, React, Vue, and other frameworks.</li>\n</ul>\n","headers":[{"title":"Test Scope","tagName":"h2","id":"test-scope","lvl":2},{"title":"Common Assertion Mistakes","tagName":"h2","id":"common-assertion-mistakes","lvl":2},{"title":"Page Models","tagName":"h2","id":"page-models","lvl":2},{"title":"Use Roles to Authenticate Users","tagName":"h2","id":"use-roles-to-authenticate-users","lvl":2},{"title":"File Structure","tagName":"h2","id":"file-structure","lvl":2},{"title":"Setup and Teardown","tagName":"h2","id":"setup-and-teardown","lvl":2},{"title":"Selector Strategy","tagName":"h2","id":"selector-strategy","lvl":2}],"title":"Best Practices","schema":null,"author":null,"preview":null,"description":null,"published":null},"topicUid":"402836","headerNav":{"items":[{"name":"TestCafe Studio","id":"TestCafe Studio"},{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started","items":[]},{"name":"API","id":"402632","url":"/documentation/402632/api","items":[]},{"name":"Recipes","id":"402633","url":"/documentation/402633/recipes","items":[]},{"name":"Examples","id":"402637","url":"/documentation/402637/examples"},{"name":"FAQ","id":"403936","url":"/documentation/403936/faq","headerUrl":"/documentation/402636/faq/general-info","items":[]},{"name":"What's New","id":"What's New","url":"/resources/release-notes","href":"/resources/release-notes","items":[]},{"name":"Dashboard Alpha","id":"Dashboard Alpha","items":[]},{"name":"Support","id":"Support","url":"/support","href":"/support"}],"activeItems":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Best Practices","id":"402634/Best Practices"},{"name":"Best Practices","id":"402836","url":"/documentation/402836/guides/best-practices/best-practices"}]},"sidebarNav":{"root":{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},"items":[{"name":"Overview","id":"402634/Overview","items":[{"name":"Getting Started","id":"402635","url":"/documentation/402635/guides/overview/getting-started"},{"name":"Why TestCafe?","id":"402631","url":"/documentation/402631/guides/overview/why-testcafe"}]},{"name":"Basic Guides","id":"402634/Basic Guides","items":[{"name":"Install TestCafe","id":"402834","url":"/documentation/402834/guides/basic-guides/install-testcafe"},{"name":"Test Structure","id":"402831","url":"/documentation/402831/guides/basic-guides/test-structure"},{"name":"Element Selectors","id":"402829","url":"/documentation/402829/guides/basic-guides/element-selectors"},{"name":"Test Actions","id":"402833","url":"/documentation/402833/guides/basic-guides/test-actions"},{"name":"Assertions","id":"402837","url":"/documentation/402837/guides/basic-guides/assertions"},{"name":"Client Functions","id":"402832","url":"/documentation/402832/guides/basic-guides/client-functions"},{"name":"Run Tests","id":"402830","url":"/documentation/402830/guides/basic-guides/run-tests"},{"name":"Debug Tests","id":"402835","url":"/documentation/402835/guides/basic-guides/debug-tests"}]},{"name":"Best Practices","id":"402634/Best Practices","items":[{"name":"Best Practices","id":"402836","url":"/documentation/402836/guides/best-practices/best-practices"},{"name":"Speed Up Test Execution","id":"402963","url":"/documentation/402963/guides/best-practices/speed-up-test-execution"},{"name":"Page Model","id":"402826","url":"/documentation/402826/guides/best-practices/page-model"},{"name":"Bootstrap your TestCafe project with create-testcafe","id":"404259","url":"/documentation/404259/guides/best-practices/create-testcafe"}]},{"name":"Intermediate Guides","id":"402634/Intermediate Guides","items":[{"name":"Browsers","id":"402828","url":"/documentation/402828/guides/intermediate-guides/browsers"},{"name":"Mobile Devices, Cloud Browsers and Emulation","id":"403584","url":"/documentation/403584/guides/intermediate-guides/mobile-devices-cloud-browsers-and-emulation"},{"name":"Native Automation Mode","id":"404237","url":"/documentation/404237/guides/intermediate-guides/native-automation-mode"},{"name":"Visual Selector Debugger","id":"404288","url":"/documentation/404288/guides/intermediate-guides/visual-selector-debugger"},{"name":"Run Tests Concurrently","id":"403626","url":"/documentation/403626/guides/intermediate-guides/run-tests-concurrently"},{"name":"Reporters","id":"402825","url":"/documentation/402825/guides/intermediate-guides/reporters"},{"name":"TypeScript and CoffeeScript","id":"402824","url":"/documentation/402824/guides/intermediate-guides/typescript-and-coffeescript"},{"name":"Authentication and Roles","id":"402845","url":"/documentation/402845/guides/intermediate-guides/authentication"},{"name":"Screenshots and Videos","id":"402840","url":"/documentation/402840/guides/intermediate-guides/screenshots-and-videos"},{"name":"API Testing","id":"403971","url":"/documentation/403971/guides/intermediate-guides/api-testing"},{"name":"Hooks","id":"403435","url":"/documentation/403435/guides/intermediate-guides/hooks"},{"name":"Quarantine Mode","id":"403841","url":"/documentation/403841/guides/intermediate-guides/quarantine-mode"},{"name":"Live Mode","id":"403842","url":"/documentation/403842/guides/intermediate-guides/live-mode"},{"name":"Intercept HTTP Requests","id":"402842","url":"/documentation/402842/guides/intermediate-guides/intercept-http-requests"},{"name":"Metadata and Filtering","id":"403436","url":"/documentation/403436/guides/intermediate-guides/metadata-and-filtering"},{"name":"Multiple Browser Windows","id":"402841","url":"/documentation/402841/guides/intermediate-guides/multiple-browser-windows"}]},{"name":"Advanced Guides","id":"402634/Advanced Guides","items":[{"name":"Advanced Selector Techniques","id":"403655","url":"/documentation/403655/guides/advanced-guides/advanced-selector-techniques"},{"name":"Inject Client Scripts","id":"402843","url":"/documentation/402843/guides/advanced-guides/inject-client-scripts"},{"name":"ESM Module Support","id":"404258","url":"/documentation/404258/guides/advanced-guides/esm-module-support"},{"name":"Create Custom Test Actions","id":"404150","url":"/documentation/404150/guides/advanced-guides/custom-test-actions"},{"name":"Fire DOM Events","id":"403219","url":"/documentation/403219/guides/advanced-guides/fire-dom-events"},{"name":"Execute Shell Commands on Startup","id":"403849","url":"/documentation/403849/guides/advanced-guides/execute-shell-commands-on-startup"},{"name":"Test HTTPS Features and HTTP/2 Websites","id":"402839","url":"/documentation/402839/guides/advanced-guides/test-https-features-and-http2-websites"},{"name":"Modify Reporter Output","id":"404388","url":"/documentation/404388/guides/advanced-guides/modify-reporter-output"},{"name":"Detect the Client Browser and Platform","id":"402844","url":"/documentation/402844/guides/advanced-guides/detect-the-client-browser-and-platform"},{"name":"Use the TestCafe Docker Image","id":"402838","url":"/documentation/402838/guides/advanced-guides/use-testcafe-docker-image"},{"name":"Built-In Wait Mechanisms","id":"402827","url":"/documentation/402827/guides/advanced-guides/built-in-wait-mechanisms"},{"name":"Replay Chrome User Flow Recordings","id":"403998","url":"/documentation/403998/guides/advanced-guides/chrome-replay-support"}]},{"name":"Experimental Capabilities","id":"403997","url":"/documentation/403997/guides/experimental-capabilities","items":[{"name":"Selector Debugging","id":"403999","url":"/documentation/403999/guides/experimental-capabilities/selector-debugging"}]},{"name":"Continuous Integration","id":"402809","url":"/documentation/402809/guides/continuous-integration","items":[{"name":"Integrate TestCafe with AppVeyor","id":"402823","url":"/documentation/402823/guides/continuous-integration/appveyor"},{"name":"Integrate TestCafe with Azure DevOps","id":"402822","url":"/documentation/402822/guides/continuous-integration/azure-devops"},{"name":"Run Tests in Bitbucket Pipelines","id":"402821","url":"/documentation/402821/guides/continuous-integration/bitbucket-pipelines"},{"name":"Integrate TestCafe With CircleCI","id":"402819","url":"/documentation/402819/guides/continuous-integration/circleci"},{"name":"Run Tests on LambdaTest with CircleCI","id":"402820","url":"/documentation/402820/guides/continuous-integration/circleci-and-lambdatest"},{"name":"Integrate TestCafe with GitHub Actions","id":"402817","url":"/documentation/402817/guides/continuous-integration/github-actions"},{"name":"Run Tests on BrowserStack with GitHub Actions","id":"402818","url":"/documentation/402818/guides/continuous-integration/github-actions-and-browserstack"},{"name":"Integrate TestCafe with GitLab","id":"402816","url":"/documentation/402816/guides/continuous-integration/gitlab"},{"name":"Integrate TestCafe with Jenkins","id":"402815","url":"/documentation/402815/guides/continuous-integration/jenkins"},{"name":"Integrate TestCafe with TeamCity","id":"402847","url":"/documentation/402847/guides/continuous-integration/teamcity"},{"name":"Run Tests in Travis CI","id":"402813","url":"/documentation/402813/guides/continuous-integration/travis"},{"name":"Run Tests on Sauce Labs with Travis CI","id":"402814","url":"/documentation/402814/guides/continuous-integration/travis-and-sauce-labs"}]},{"name":"Extend TestCafe","id":"402634/Extend TestCafe","items":[{"name":"Install Plugins","id":"402811","url":"/documentation/402811/guides/extend-testcafe/install-plugins"},{"name":"Reporter Plugin","id":"402810","url":"/documentation/402810/guides/extend-testcafe/reporter-plugin"},{"name":"Browser Provider Plugin","id":"402812","url":"/documentation/402812/guides/extend-testcafe/browser-provider-plugin"}]}],"activeItems":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Best Practices","id":"402634/Best Practices"},{"name":"Best Practices","id":"402836","url":"/documentation/402836/guides/best-practices/best-practices"}],"showLeafs":true},"breadcrumbsNav":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Best Practices","id":"402634/Best Practices"},{"name":"Best Practices","id":"402836","url":"/documentation/402836/guides/best-practices/best-practices"}],"publishDates":{"teamBlog":[1667260800000,1661889600000,1657569600000,1637107200000,1633550400000,1632254400000,1626206400000,1612814400000,1609113600000,1607644800000,1605657600000,1605571200000,1600905600000,1599076800000,1598385600000,1597953600000,1597780800000,1595966400000,1594670400000,1593460800000,1590350400000,1587326400000],"releaseNotes}},"__N_SSG":true}